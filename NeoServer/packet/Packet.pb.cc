// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Packet.proto

#include "Packet.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace neo {
PROTOBUF_CONSTEXPR Header::Header(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.size_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeaderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeaderDefaultTypeInternal() {}
  union {
    Header _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeaderDefaultTypeInternal _Header_default_instance_;
PROTOBUF_CONSTEXPR P_C_REQ_LOGIN::P_C_REQ_LOGIN(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.uuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct P_C_REQ_LOGINDefaultTypeInternal {
  PROTOBUF_CONSTEXPR P_C_REQ_LOGINDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~P_C_REQ_LOGINDefaultTypeInternal() {}
  union {
    P_C_REQ_LOGIN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 P_C_REQ_LOGINDefaultTypeInternal _P_C_REQ_LOGIN_default_instance_;
PROTOBUF_CONSTEXPR P_S_RES_LOGOUT::P_S_RES_LOGOUT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct P_S_RES_LOGOUTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR P_S_RES_LOGOUTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~P_S_RES_LOGOUTDefaultTypeInternal() {}
  union {
    P_S_RES_LOGOUT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 P_S_RES_LOGOUTDefaultTypeInternal _P_S_RES_LOGOUT_default_instance_;
PROTOBUF_CONSTEXPR P_C_REQ_LOGOUT::P_C_REQ_LOGOUT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mapid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct P_C_REQ_LOGOUTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR P_C_REQ_LOGOUTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~P_C_REQ_LOGOUTDefaultTypeInternal() {}
  union {
    P_C_REQ_LOGOUT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 P_C_REQ_LOGOUTDefaultTypeInternal _P_C_REQ_LOGOUT_default_instance_;
PROTOBUF_CONSTEXPR P_S_RES_LOGIN::P_S_RES_LOGIN(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.result_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct P_S_RES_LOGINDefaultTypeInternal {
  PROTOBUF_CONSTEXPR P_S_RES_LOGINDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~P_S_RES_LOGINDefaultTypeInternal() {}
  union {
    P_S_RES_LOGIN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 P_S_RES_LOGINDefaultTypeInternal _P_S_RES_LOGIN_default_instance_;
PROTOBUF_CONSTEXPR P_C_NOTIFY_PING::P_C_NOTIFY_PING(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.time_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct P_C_NOTIFY_PINGDefaultTypeInternal {
  PROTOBUF_CONSTEXPR P_C_NOTIFY_PINGDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~P_C_NOTIFY_PINGDefaultTypeInternal() {}
  union {
    P_C_NOTIFY_PING _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 P_C_NOTIFY_PINGDefaultTypeInternal _P_C_NOTIFY_PING_default_instance_;
PROTOBUF_CONSTEXPR P_S_NOTIFY_PING::P_S_NOTIFY_PING(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.time_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct P_S_NOTIFY_PINGDefaultTypeInternal {
  PROTOBUF_CONSTEXPR P_S_NOTIFY_PINGDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~P_S_NOTIFY_PINGDefaultTypeInternal() {}
  union {
    P_S_NOTIFY_PING _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 P_S_NOTIFY_PINGDefaultTypeInternal _P_S_NOTIFY_PING_default_instance_;
PROTOBUF_CONSTEXPR P_C_UPDATE_CHAR_POSITION::P_C_UPDATE_CHAR_POSITION(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct P_C_UPDATE_CHAR_POSITIONDefaultTypeInternal {
  PROTOBUF_CONSTEXPR P_C_UPDATE_CHAR_POSITIONDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~P_C_UPDATE_CHAR_POSITIONDefaultTypeInternal() {}
  union {
    P_C_UPDATE_CHAR_POSITION _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 P_C_UPDATE_CHAR_POSITIONDefaultTypeInternal _P_C_UPDATE_CHAR_POSITION_default_instance_;
PROTOBUF_CONSTEXPR GAME_OBJECT::GAME_OBJECT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GAME_OBJECTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GAME_OBJECTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GAME_OBJECTDefaultTypeInternal() {}
  union {
    GAME_OBJECT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GAME_OBJECTDefaultTypeInternal _GAME_OBJECT_default_instance_;
PROTOBUF_CONSTEXPR P_S_NOTIFY_MONSTER_POSITION_MONSTER_POSITION::P_S_NOTIFY_MONSTER_POSITION_MONSTER_POSITION(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_.voleoctiy_x_)*/0
  , /*decltype(_impl_.voleoctiy_y_)*/0
  , /*decltype(_impl_.speed_)*/0
  , /*decltype(_impl_.animation_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct P_S_NOTIFY_MONSTER_POSITION_MONSTER_POSITIONDefaultTypeInternal {
  PROTOBUF_CONSTEXPR P_S_NOTIFY_MONSTER_POSITION_MONSTER_POSITIONDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~P_S_NOTIFY_MONSTER_POSITION_MONSTER_POSITIONDefaultTypeInternal() {}
  union {
    P_S_NOTIFY_MONSTER_POSITION_MONSTER_POSITION _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 P_S_NOTIFY_MONSTER_POSITION_MONSTER_POSITIONDefaultTypeInternal _P_S_NOTIFY_MONSTER_POSITION_MONSTER_POSITION_default_instance_;
PROTOBUF_CONSTEXPR P_S_NOTIFY_MONSTER_POSITION::P_S_NOTIFY_MONSTER_POSITION(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.monster_position_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct P_S_NOTIFY_MONSTER_POSITIONDefaultTypeInternal {
  PROTOBUF_CONSTEXPR P_S_NOTIFY_MONSTER_POSITIONDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~P_S_NOTIFY_MONSTER_POSITIONDefaultTypeInternal() {}
  union {
    P_S_NOTIFY_MONSTER_POSITION _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 P_S_NOTIFY_MONSTER_POSITIONDefaultTypeInternal _P_S_NOTIFY_MONSTER_POSITION_default_instance_;
PROTOBUF_CONSTEXPR P_C_REQ_CHANNEL_REGISTER::P_C_REQ_CHANNEL_REGISTER(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.channelid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct P_C_REQ_CHANNEL_REGISTERDefaultTypeInternal {
  PROTOBUF_CONSTEXPR P_C_REQ_CHANNEL_REGISTERDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~P_C_REQ_CHANNEL_REGISTERDefaultTypeInternal() {}
  union {
    P_C_REQ_CHANNEL_REGISTER _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 P_C_REQ_CHANNEL_REGISTERDefaultTypeInternal _P_C_REQ_CHANNEL_REGISTER_default_instance_;
PROTOBUF_CONSTEXPR P_S_RES_CHANNEL_REGISTER::P_S_RES_CHANNEL_REGISTER(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.result_)*/0
  , /*decltype(_impl_.channelid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct P_S_RES_CHANNEL_REGISTERDefaultTypeInternal {
  PROTOBUF_CONSTEXPR P_S_RES_CHANNEL_REGISTERDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~P_S_RES_CHANNEL_REGISTERDefaultTypeInternal() {}
  union {
    P_S_RES_CHANNEL_REGISTER _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 P_S_RES_CHANNEL_REGISTERDefaultTypeInternal _P_S_RES_CHANNEL_REGISTER_default_instance_;
PROTOBUF_CONSTEXPR P_C_NOTIFY_CHANNEL_UNREGISTER::P_C_NOTIFY_CHANNEL_UNREGISTER(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.result_)*/0
  , /*decltype(_impl_.channelid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct P_C_NOTIFY_CHANNEL_UNREGISTERDefaultTypeInternal {
  PROTOBUF_CONSTEXPR P_C_NOTIFY_CHANNEL_UNREGISTERDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~P_C_NOTIFY_CHANNEL_UNREGISTERDefaultTypeInternal() {}
  union {
    P_C_NOTIFY_CHANNEL_UNREGISTER _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 P_C_NOTIFY_CHANNEL_UNREGISTERDefaultTypeInternal _P_C_NOTIFY_CHANNEL_UNREGISTER_default_instance_;
PROTOBUF_CONSTEXPR P_C_NOTIFY_MAP_REGISTER::P_C_NOTIFY_MAP_REGISTER(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mapcount_)*/0
  , /*decltype(_impl_.isregister_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct P_C_NOTIFY_MAP_REGISTERDefaultTypeInternal {
  PROTOBUF_CONSTEXPR P_C_NOTIFY_MAP_REGISTERDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~P_C_NOTIFY_MAP_REGISTERDefaultTypeInternal() {}
  union {
    P_C_NOTIFY_MAP_REGISTER _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 P_C_NOTIFY_MAP_REGISTERDefaultTypeInternal _P_C_NOTIFY_MAP_REGISTER_default_instance_;
PROTOBUF_CONSTEXPR P_C_REQ_CHARACTER_REGISTER::P_C_REQ_CHARACTER_REGISTER(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mapid_)*/0
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct P_C_REQ_CHARACTER_REGISTERDefaultTypeInternal {
  PROTOBUF_CONSTEXPR P_C_REQ_CHARACTER_REGISTERDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~P_C_REQ_CHARACTER_REGISTERDefaultTypeInternal() {}
  union {
    P_C_REQ_CHARACTER_REGISTER _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 P_C_REQ_CHARACTER_REGISTERDefaultTypeInternal _P_C_REQ_CHARACTER_REGISTER_default_instance_;
PROTOBUF_CONSTEXPR P_S_RES_CHARACTER_REGISTER::P_S_RES_CHARACTER_REGISTER(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.objects_)*/{}
  , /*decltype(_impl_.msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.result_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct P_S_RES_CHARACTER_REGISTERDefaultTypeInternal {
  PROTOBUF_CONSTEXPR P_S_RES_CHARACTER_REGISTERDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~P_S_RES_CHARACTER_REGISTERDefaultTypeInternal() {}
  union {
    P_S_RES_CHARACTER_REGISTER _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 P_S_RES_CHARACTER_REGISTERDefaultTypeInternal _P_S_RES_CHARACTER_REGISTER_default_instance_;
PROTOBUF_CONSTEXPR P_C_REQ_CHARACTER_MAP_UNREGISTER::P_C_REQ_CHARACTER_MAP_UNREGISTER(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mapid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct P_C_REQ_CHARACTER_MAP_UNREGISTERDefaultTypeInternal {
  PROTOBUF_CONSTEXPR P_C_REQ_CHARACTER_MAP_UNREGISTERDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~P_C_REQ_CHARACTER_MAP_UNREGISTERDefaultTypeInternal() {}
  union {
    P_C_REQ_CHARACTER_MAP_UNREGISTER _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 P_C_REQ_CHARACTER_MAP_UNREGISTERDefaultTypeInternal _P_C_REQ_CHARACTER_MAP_UNREGISTER_default_instance_;
PROTOBUF_CONSTEXPR P_S_NOTIFY_CHARACTER_MAP_UNREGISTER::P_S_NOTIFY_CHARACTER_MAP_UNREGISTER(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mapid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct P_S_NOTIFY_CHARACTER_MAP_UNREGISTERDefaultTypeInternal {
  PROTOBUF_CONSTEXPR P_S_NOTIFY_CHARACTER_MAP_UNREGISTERDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~P_S_NOTIFY_CHARACTER_MAP_UNREGISTERDefaultTypeInternal() {}
  union {
    P_S_NOTIFY_CHARACTER_MAP_UNREGISTER _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 P_S_NOTIFY_CHARACTER_MAP_UNREGISTERDefaultTypeInternal _P_S_NOTIFY_CHARACTER_MAP_UNREGISTER_default_instance_;
PROTOBUF_CONSTEXPR P_S_NOTIFY_MONSTER_MAP_REGISTER::P_S_NOTIFY_MONSTER_MAP_REGISTER(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mapid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct P_S_NOTIFY_MONSTER_MAP_REGISTERDefaultTypeInternal {
  PROTOBUF_CONSTEXPR P_S_NOTIFY_MONSTER_MAP_REGISTERDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~P_S_NOTIFY_MONSTER_MAP_REGISTERDefaultTypeInternal() {}
  union {
    P_S_NOTIFY_MONSTER_MAP_REGISTER _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 P_S_NOTIFY_MONSTER_MAP_REGISTERDefaultTypeInternal _P_S_NOTIFY_MONSTER_MAP_REGISTER_default_instance_;
PROTOBUF_CONSTEXPR P_S_NOTIFY_MONSTER_MAP_UNREGISTER::P_S_NOTIFY_MONSTER_MAP_UNREGISTER(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mapid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct P_S_NOTIFY_MONSTER_MAP_UNREGISTERDefaultTypeInternal {
  PROTOBUF_CONSTEXPR P_S_NOTIFY_MONSTER_MAP_UNREGISTERDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~P_S_NOTIFY_MONSTER_MAP_UNREGISTERDefaultTypeInternal() {}
  union {
    P_S_NOTIFY_MONSTER_MAP_UNREGISTER _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 P_S_NOTIFY_MONSTER_MAP_UNREGISTERDefaultTypeInternal _P_S_NOTIFY_MONSTER_MAP_UNREGISTER_default_instance_;
PROTOBUF_CONSTEXPR P_S_NOTIFY_ATTACK_ANI_EVENT::P_S_NOTIFY_ATTACK_ANI_EVENT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mapid_)*/0
  , /*decltype(_impl_.dir_)*/0
  , /*decltype(_impl_.animationcount_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct P_S_NOTIFY_ATTACK_ANI_EVENTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR P_S_NOTIFY_ATTACK_ANI_EVENTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~P_S_NOTIFY_ATTACK_ANI_EVENTDefaultTypeInternal() {}
  union {
    P_S_NOTIFY_ATTACK_ANI_EVENT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 P_S_NOTIFY_ATTACK_ANI_EVENTDefaultTypeInternal _P_S_NOTIFY_ATTACK_ANI_EVENT_default_instance_;
PROTOBUF_CONSTEXPR P_S_NOTIFY_CHARACTER_INFO::P_S_NOTIFY_CHARACTER_INFO(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct P_S_NOTIFY_CHARACTER_INFODefaultTypeInternal {
  PROTOBUF_CONSTEXPR P_S_NOTIFY_CHARACTER_INFODefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~P_S_NOTIFY_CHARACTER_INFODefaultTypeInternal() {}
  union {
    P_S_NOTIFY_CHARACTER_INFO _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 P_S_NOTIFY_CHARACTER_INFODefaultTypeInternal _P_S_NOTIFY_CHARACTER_INFO_default_instance_;
PROTOBUF_CONSTEXPR P_S_NOTIFY_MONSTER_INFO_MONSTER_DATA::P_S_NOTIFY_MONSTER_INFO_MONSTER_DATA(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pos_x_)*/0
  , /*decltype(_impl_.pos_y_)*/0
  , /*decltype(_impl_.hp_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct P_S_NOTIFY_MONSTER_INFO_MONSTER_DATADefaultTypeInternal {
  PROTOBUF_CONSTEXPR P_S_NOTIFY_MONSTER_INFO_MONSTER_DATADefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~P_S_NOTIFY_MONSTER_INFO_MONSTER_DATADefaultTypeInternal() {}
  union {
    P_S_NOTIFY_MONSTER_INFO_MONSTER_DATA _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 P_S_NOTIFY_MONSTER_INFO_MONSTER_DATADefaultTypeInternal _P_S_NOTIFY_MONSTER_INFO_MONSTER_DATA_default_instance_;
PROTOBUF_CONSTEXPR P_S_NOTIFY_MONSTER_INFO::P_S_NOTIFY_MONSTER_INFO(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.monsterdatas_)*/{}
  , /*decltype(_impl_.msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.monstercode_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct P_S_NOTIFY_MONSTER_INFODefaultTypeInternal {
  PROTOBUF_CONSTEXPR P_S_NOTIFY_MONSTER_INFODefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~P_S_NOTIFY_MONSTER_INFODefaultTypeInternal() {}
  union {
    P_S_NOTIFY_MONSTER_INFO _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 P_S_NOTIFY_MONSTER_INFODefaultTypeInternal _P_S_NOTIFY_MONSTER_INFO_default_instance_;
PROTOBUF_CONSTEXPR P_C_REQ_ATTACK_RANGE_HIT_EVENT::P_C_REQ_ATTACK_RANGE_HIT_EVENT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.attackuser_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hitobject_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mapid_)*/0
  , /*decltype(_impl_.damage_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct P_C_REQ_ATTACK_RANGE_HIT_EVENTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR P_C_REQ_ATTACK_RANGE_HIT_EVENTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~P_C_REQ_ATTACK_RANGE_HIT_EVENTDefaultTypeInternal() {}
  union {
    P_C_REQ_ATTACK_RANGE_HIT_EVENT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 P_C_REQ_ATTACK_RANGE_HIT_EVENTDefaultTypeInternal _P_C_REQ_ATTACK_RANGE_HIT_EVENT_default_instance_;
PROTOBUF_CONSTEXPR P_S_NOTIFY_EFFECT_EVENT::P_S_NOTIFY_EFFECT_EVENT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.attackuser_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.startpos_x_)*/0
  , /*decltype(_impl_.startpos_y_)*/0
  , /*decltype(_impl_.startpos_z_)*/0
  , /*decltype(_impl_.dis_)*/0
  , /*decltype(_impl_.dir_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct P_S_NOTIFY_EFFECT_EVENTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR P_S_NOTIFY_EFFECT_EVENTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~P_S_NOTIFY_EFFECT_EVENTDefaultTypeInternal() {}
  union {
    P_S_NOTIFY_EFFECT_EVENT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 P_S_NOTIFY_EFFECT_EVENTDefaultTypeInternal _P_S_NOTIFY_EFFECT_EVENT_default_instance_;
PROTOBUF_CONSTEXPR P_C_REQ_ATTACK_RANGE_EVENT::P_C_REQ_ATTACK_RANGE_EVENT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.attackuser_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.startpos_x_)*/0
  , /*decltype(_impl_.startpos_y_)*/0
  , /*decltype(_impl_.startpos_z_)*/0
  , /*decltype(_impl_.mapid_)*/0
  , /*decltype(_impl_.dir_)*/0
  , /*decltype(_impl_.dis_)*/0
  , /*decltype(_impl_.damage_)*/0
  , /*decltype(_impl_.animation_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct P_C_REQ_ATTACK_RANGE_EVENTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR P_C_REQ_ATTACK_RANGE_EVENTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~P_C_REQ_ATTACK_RANGE_EVENTDefaultTypeInternal() {}
  union {
    P_C_REQ_ATTACK_RANGE_EVENT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 P_C_REQ_ATTACK_RANGE_EVENTDefaultTypeInternal _P_C_REQ_ATTACK_RANGE_EVENT_default_instance_;
PROTOBUF_CONSTEXPR P_C_REQ_ATTACK_EVENT::P_C_REQ_ATTACK_EVENT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.attackuser_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hitobject_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mapid_)*/0
  , /*decltype(_impl_.dir_)*/0
  , /*decltype(_impl_.animation_)*/0
  , /*decltype(_impl_.damage_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct P_C_REQ_ATTACK_EVENTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR P_C_REQ_ATTACK_EVENTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~P_C_REQ_ATTACK_EVENTDefaultTypeInternal() {}
  union {
    P_C_REQ_ATTACK_EVENT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 P_C_REQ_ATTACK_EVENTDefaultTypeInternal _P_C_REQ_ATTACK_EVENT_default_instance_;
PROTOBUF_CONSTEXPR P_S_RES_ATTACK_EVENT::P_S_RES_ATTACK_EVENT(
    ::_pbi::ConstantInitialized) {}
struct P_S_RES_ATTACK_EVENTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR P_S_RES_ATTACK_EVENTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~P_S_RES_ATTACK_EVENTDefaultTypeInternal() {}
  union {
    P_S_RES_ATTACK_EVENT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 P_S_RES_ATTACK_EVENTDefaultTypeInternal _P_S_RES_ATTACK_EVENT_default_instance_;
PROTOBUF_CONSTEXPR P_S_NOTIFY_ATTACK_EVENT::P_S_NOTIFY_ATTACK_EVENT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hitobject_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hp_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct P_S_NOTIFY_ATTACK_EVENTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR P_S_NOTIFY_ATTACK_EVENTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~P_S_NOTIFY_ATTACK_EVENTDefaultTypeInternal() {}
  union {
    P_S_NOTIFY_ATTACK_EVENT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 P_S_NOTIFY_ATTACK_EVENTDefaultTypeInternal _P_S_NOTIFY_ATTACK_EVENT_default_instance_;
PROTOBUF_CONSTEXPR P_C_NOTIFY_RESPAWN::P_C_NOTIFY_RESPAWN(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct P_C_NOTIFY_RESPAWNDefaultTypeInternal {
  PROTOBUF_CONSTEXPR P_C_NOTIFY_RESPAWNDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~P_C_NOTIFY_RESPAWNDefaultTypeInternal() {}
  union {
    P_C_NOTIFY_RESPAWN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 P_C_NOTIFY_RESPAWNDefaultTypeInternal _P_C_NOTIFY_RESPAWN_default_instance_;
PROTOBUF_CONSTEXPR P_NOTIFY_OBJECT_UPDATE::P_NOTIFY_OBJECT_UPDATE(
    ::_pbi::ConstantInitialized) {}
struct P_NOTIFY_OBJECT_UPDATEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR P_NOTIFY_OBJECT_UPDATEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~P_NOTIFY_OBJECT_UPDATEDefaultTypeInternal() {}
  union {
    P_NOTIFY_OBJECT_UPDATE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 P_NOTIFY_OBJECT_UPDATEDefaultTypeInternal _P_NOTIFY_OBJECT_UPDATE_default_instance_;
PROTOBUF_CONSTEXPR P_S_NOTIFY_CHANNEL_INFO_CHANNEL_DATA::P_S_NOTIFY_CHANNEL_INFO_CHANNEL_DATA(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.usercount_)*/0
  , /*decltype(_impl_.channelid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct P_S_NOTIFY_CHANNEL_INFO_CHANNEL_DATADefaultTypeInternal {
  PROTOBUF_CONSTEXPR P_S_NOTIFY_CHANNEL_INFO_CHANNEL_DATADefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~P_S_NOTIFY_CHANNEL_INFO_CHANNEL_DATADefaultTypeInternal() {}
  union {
    P_S_NOTIFY_CHANNEL_INFO_CHANNEL_DATA _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 P_S_NOTIFY_CHANNEL_INFO_CHANNEL_DATADefaultTypeInternal _P_S_NOTIFY_CHANNEL_INFO_CHANNEL_DATA_default_instance_;
PROTOBUF_CONSTEXPR P_S_NOTIFY_CHANNEL_INFO::P_S_NOTIFY_CHANNEL_INFO(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.chaanelinfos_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct P_S_NOTIFY_CHANNEL_INFODefaultTypeInternal {
  PROTOBUF_CONSTEXPR P_S_NOTIFY_CHANNEL_INFODefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~P_S_NOTIFY_CHANNEL_INFODefaultTypeInternal() {}
  union {
    P_S_NOTIFY_CHANNEL_INFO _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 P_S_NOTIFY_CHANNEL_INFODefaultTypeInternal _P_S_NOTIFY_CHANNEL_INFO_default_instance_;
}  // namespace neo
static ::_pb::Metadata file_level_metadata_Packet_2eproto[35];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_Packet_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Packet_2eproto = nullptr;

const uint32_t TableStruct_Packet_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::neo::Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::neo::Header, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::neo::Header, _impl_.size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::neo::P_C_REQ_LOGIN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::neo::P_C_REQ_LOGIN, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::neo::P_C_REQ_LOGIN, _impl_.uuid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::neo::P_S_RES_LOGOUT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::neo::P_S_RES_LOGOUT, _impl_.user_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::neo::P_C_REQ_LOGOUT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::neo::P_C_REQ_LOGOUT, _impl_.mapid_),
  PROTOBUF_FIELD_OFFSET(::neo::P_C_REQ_LOGOUT, _impl_.user_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::neo::P_S_RES_LOGIN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::neo::P_S_RES_LOGIN, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::neo::P_S_RES_LOGIN, _impl_.msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::neo::P_C_NOTIFY_PING, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::neo::P_C_NOTIFY_PING, _impl_.time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::neo::P_S_NOTIFY_PING, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::neo::P_S_NOTIFY_PING, _impl_.time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::neo::P_C_UPDATE_CHAR_POSITION, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::neo::P_C_UPDATE_CHAR_POSITION, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::neo::GAME_OBJECT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::neo::GAME_OBJECT, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::neo::P_S_NOTIFY_MONSTER_POSITION_MONSTER_POSITION, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::neo::P_S_NOTIFY_MONSTER_POSITION_MONSTER_POSITION, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::neo::P_S_NOTIFY_MONSTER_POSITION_MONSTER_POSITION, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::neo::P_S_NOTIFY_MONSTER_POSITION_MONSTER_POSITION, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::neo::P_S_NOTIFY_MONSTER_POSITION_MONSTER_POSITION, _impl_.z_),
  PROTOBUF_FIELD_OFFSET(::neo::P_S_NOTIFY_MONSTER_POSITION_MONSTER_POSITION, _impl_.voleoctiy_x_),
  PROTOBUF_FIELD_OFFSET(::neo::P_S_NOTIFY_MONSTER_POSITION_MONSTER_POSITION, _impl_.voleoctiy_y_),
  PROTOBUF_FIELD_OFFSET(::neo::P_S_NOTIFY_MONSTER_POSITION_MONSTER_POSITION, _impl_.speed_),
  PROTOBUF_FIELD_OFFSET(::neo::P_S_NOTIFY_MONSTER_POSITION_MONSTER_POSITION, _impl_.animation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::neo::P_S_NOTIFY_MONSTER_POSITION, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::neo::P_S_NOTIFY_MONSTER_POSITION, _impl_.monster_position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::neo::P_C_REQ_CHANNEL_REGISTER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::neo::P_C_REQ_CHANNEL_REGISTER, _impl_.user_),
  PROTOBUF_FIELD_OFFSET(::neo::P_C_REQ_CHANNEL_REGISTER, _impl_.channelid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::neo::P_S_RES_CHANNEL_REGISTER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::neo::P_S_RES_CHANNEL_REGISTER, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::neo::P_S_RES_CHANNEL_REGISTER, _impl_.channelid_),
  PROTOBUF_FIELD_OFFSET(::neo::P_S_RES_CHANNEL_REGISTER, _impl_.msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::neo::P_C_NOTIFY_CHANNEL_UNREGISTER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::neo::P_C_NOTIFY_CHANNEL_UNREGISTER, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::neo::P_C_NOTIFY_CHANNEL_UNREGISTER, _impl_.channelid_),
  PROTOBUF_FIELD_OFFSET(::neo::P_C_NOTIFY_CHANNEL_UNREGISTER, _impl_.msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::neo::P_C_NOTIFY_MAP_REGISTER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::neo::P_C_NOTIFY_MAP_REGISTER, _impl_.mapcount_),
  PROTOBUF_FIELD_OFFSET(::neo::P_C_NOTIFY_MAP_REGISTER, _impl_.isregister_),
  PROTOBUF_FIELD_OFFSET(::neo::P_C_NOTIFY_MAP_REGISTER, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::neo::P_C_REQ_CHARACTER_REGISTER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::neo::P_C_REQ_CHARACTER_REGISTER, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::neo::P_C_REQ_CHARACTER_REGISTER, _impl_.mapid_),
  PROTOBUF_FIELD_OFFSET(::neo::P_C_REQ_CHARACTER_REGISTER, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::neo::P_C_REQ_CHARACTER_REGISTER, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::neo::P_C_REQ_CHARACTER_REGISTER, _impl_.z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::neo::P_S_RES_CHARACTER_REGISTER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::neo::P_S_RES_CHARACTER_REGISTER, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::neo::P_S_RES_CHARACTER_REGISTER, _impl_.msg_),
  PROTOBUF_FIELD_OFFSET(::neo::P_S_RES_CHARACTER_REGISTER, _impl_.objects_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::neo::P_C_REQ_CHARACTER_MAP_UNREGISTER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::neo::P_C_REQ_CHARACTER_MAP_UNREGISTER, _impl_.mapid_),
  PROTOBUF_FIELD_OFFSET(::neo::P_C_REQ_CHARACTER_MAP_UNREGISTER, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::neo::P_S_NOTIFY_CHARACTER_MAP_UNREGISTER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::neo::P_S_NOTIFY_CHARACTER_MAP_UNREGISTER, _impl_.mapid_),
  PROTOBUF_FIELD_OFFSET(::neo::P_S_NOTIFY_CHARACTER_MAP_UNREGISTER, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::neo::P_S_NOTIFY_MONSTER_MAP_REGISTER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::neo::P_S_NOTIFY_MONSTER_MAP_REGISTER, _impl_.mapid_),
  PROTOBUF_FIELD_OFFSET(::neo::P_S_NOTIFY_MONSTER_MAP_REGISTER, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::neo::P_S_NOTIFY_MONSTER_MAP_UNREGISTER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::neo::P_S_NOTIFY_MONSTER_MAP_UNREGISTER, _impl_.mapid_),
  PROTOBUF_FIELD_OFFSET(::neo::P_S_NOTIFY_MONSTER_MAP_UNREGISTER, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::neo::P_S_NOTIFY_ATTACK_ANI_EVENT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::neo::P_S_NOTIFY_ATTACK_ANI_EVENT, _impl_.mapid_),
  PROTOBUF_FIELD_OFFSET(::neo::P_S_NOTIFY_ATTACK_ANI_EVENT, _impl_.dir_),
  PROTOBUF_FIELD_OFFSET(::neo::P_S_NOTIFY_ATTACK_ANI_EVENT, _impl_.animationcount_),
  PROTOBUF_FIELD_OFFSET(::neo::P_S_NOTIFY_ATTACK_ANI_EVENT, _impl_.player_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::neo::P_S_NOTIFY_CHARACTER_INFO, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::neo::P_S_NOTIFY_CHARACTER_INFO, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::neo::P_S_NOTIFY_MONSTER_INFO_MONSTER_DATA, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::neo::P_S_NOTIFY_MONSTER_INFO_MONSTER_DATA, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::neo::P_S_NOTIFY_MONSTER_INFO_MONSTER_DATA, _impl_.pos_x_),
  PROTOBUF_FIELD_OFFSET(::neo::P_S_NOTIFY_MONSTER_INFO_MONSTER_DATA, _impl_.pos_y_),
  PROTOBUF_FIELD_OFFSET(::neo::P_S_NOTIFY_MONSTER_INFO_MONSTER_DATA, _impl_.hp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::neo::P_S_NOTIFY_MONSTER_INFO, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::neo::P_S_NOTIFY_MONSTER_INFO, _impl_.monstercode_),
  PROTOBUF_FIELD_OFFSET(::neo::P_S_NOTIFY_MONSTER_INFO, _impl_.msg_),
  PROTOBUF_FIELD_OFFSET(::neo::P_S_NOTIFY_MONSTER_INFO, _impl_.monsterdatas_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::neo::P_C_REQ_ATTACK_RANGE_HIT_EVENT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::neo::P_C_REQ_ATTACK_RANGE_HIT_EVENT, _impl_.mapid_),
  PROTOBUF_FIELD_OFFSET(::neo::P_C_REQ_ATTACK_RANGE_HIT_EVENT, _impl_.attackuser_),
  PROTOBUF_FIELD_OFFSET(::neo::P_C_REQ_ATTACK_RANGE_HIT_EVENT, _impl_.hitobject_),
  PROTOBUF_FIELD_OFFSET(::neo::P_C_REQ_ATTACK_RANGE_HIT_EVENT, _impl_.damage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::neo::P_S_NOTIFY_EFFECT_EVENT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::neo::P_S_NOTIFY_EFFECT_EVENT, _impl_.startpos_x_),
  PROTOBUF_FIELD_OFFSET(::neo::P_S_NOTIFY_EFFECT_EVENT, _impl_.startpos_y_),
  PROTOBUF_FIELD_OFFSET(::neo::P_S_NOTIFY_EFFECT_EVENT, _impl_.startpos_z_),
  PROTOBUF_FIELD_OFFSET(::neo::P_S_NOTIFY_EFFECT_EVENT, _impl_.attackuser_),
  PROTOBUF_FIELD_OFFSET(::neo::P_S_NOTIFY_EFFECT_EVENT, _impl_.dis_),
  PROTOBUF_FIELD_OFFSET(::neo::P_S_NOTIFY_EFFECT_EVENT, _impl_.dir_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::neo::P_C_REQ_ATTACK_RANGE_EVENT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::neo::P_C_REQ_ATTACK_RANGE_EVENT, _impl_.startpos_x_),
  PROTOBUF_FIELD_OFFSET(::neo::P_C_REQ_ATTACK_RANGE_EVENT, _impl_.startpos_y_),
  PROTOBUF_FIELD_OFFSET(::neo::P_C_REQ_ATTACK_RANGE_EVENT, _impl_.startpos_z_),
  PROTOBUF_FIELD_OFFSET(::neo::P_C_REQ_ATTACK_RANGE_EVENT, _impl_.mapid_),
  PROTOBUF_FIELD_OFFSET(::neo::P_C_REQ_ATTACK_RANGE_EVENT, _impl_.dir_),
  PROTOBUF_FIELD_OFFSET(::neo::P_C_REQ_ATTACK_RANGE_EVENT, _impl_.attackuser_),
  PROTOBUF_FIELD_OFFSET(::neo::P_C_REQ_ATTACK_RANGE_EVENT, _impl_.dis_),
  PROTOBUF_FIELD_OFFSET(::neo::P_C_REQ_ATTACK_RANGE_EVENT, _impl_.damage_),
  PROTOBUF_FIELD_OFFSET(::neo::P_C_REQ_ATTACK_RANGE_EVENT, _impl_.animation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::neo::P_C_REQ_ATTACK_EVENT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::neo::P_C_REQ_ATTACK_EVENT, _impl_.mapid_),
  PROTOBUF_FIELD_OFFSET(::neo::P_C_REQ_ATTACK_EVENT, _impl_.attackuser_),
  PROTOBUF_FIELD_OFFSET(::neo::P_C_REQ_ATTACK_EVENT, _impl_.hitobject_),
  PROTOBUF_FIELD_OFFSET(::neo::P_C_REQ_ATTACK_EVENT, _impl_.dir_),
  PROTOBUF_FIELD_OFFSET(::neo::P_C_REQ_ATTACK_EVENT, _impl_.animation_),
  PROTOBUF_FIELD_OFFSET(::neo::P_C_REQ_ATTACK_EVENT, _impl_.damage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::neo::P_S_RES_ATTACK_EVENT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::neo::P_S_NOTIFY_ATTACK_EVENT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::neo::P_S_NOTIFY_ATTACK_EVENT, _impl_.hitobject_),
  PROTOBUF_FIELD_OFFSET(::neo::P_S_NOTIFY_ATTACK_EVENT, _impl_.hp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::neo::P_C_NOTIFY_RESPAWN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::neo::P_C_NOTIFY_RESPAWN, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::neo::P_NOTIFY_OBJECT_UPDATE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::neo::P_S_NOTIFY_CHANNEL_INFO_CHANNEL_DATA, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::neo::P_S_NOTIFY_CHANNEL_INFO_CHANNEL_DATA, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::neo::P_S_NOTIFY_CHANNEL_INFO_CHANNEL_DATA, _impl_.usercount_),
  PROTOBUF_FIELD_OFFSET(::neo::P_S_NOTIFY_CHANNEL_INFO_CHANNEL_DATA, _impl_.channelid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::neo::P_S_NOTIFY_CHANNEL_INFO, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::neo::P_S_NOTIFY_CHANNEL_INFO, _impl_.chaanelinfos_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::neo::Header)},
  { 8, -1, -1, sizeof(::neo::P_C_REQ_LOGIN)},
  { 16, -1, -1, sizeof(::neo::P_S_RES_LOGOUT)},
  { 23, -1, -1, sizeof(::neo::P_C_REQ_LOGOUT)},
  { 31, -1, -1, sizeof(::neo::P_S_RES_LOGIN)},
  { 39, -1, -1, sizeof(::neo::P_C_NOTIFY_PING)},
  { 46, -1, -1, sizeof(::neo::P_S_NOTIFY_PING)},
  { 53, -1, -1, sizeof(::neo::P_C_UPDATE_CHAR_POSITION)},
  { 60, -1, -1, sizeof(::neo::GAME_OBJECT)},
  { 67, -1, -1, sizeof(::neo::P_S_NOTIFY_MONSTER_POSITION_MONSTER_POSITION)},
  { 81, -1, -1, sizeof(::neo::P_S_NOTIFY_MONSTER_POSITION)},
  { 88, -1, -1, sizeof(::neo::P_C_REQ_CHANNEL_REGISTER)},
  { 96, -1, -1, sizeof(::neo::P_S_RES_CHANNEL_REGISTER)},
  { 105, -1, -1, sizeof(::neo::P_C_NOTIFY_CHANNEL_UNREGISTER)},
  { 114, -1, -1, sizeof(::neo::P_C_NOTIFY_MAP_REGISTER)},
  { 123, -1, -1, sizeof(::neo::P_C_REQ_CHARACTER_REGISTER)},
  { 134, -1, -1, sizeof(::neo::P_S_RES_CHARACTER_REGISTER)},
  { 143, -1, -1, sizeof(::neo::P_C_REQ_CHARACTER_MAP_UNREGISTER)},
  { 151, -1, -1, sizeof(::neo::P_S_NOTIFY_CHARACTER_MAP_UNREGISTER)},
  { 159, -1, -1, sizeof(::neo::P_S_NOTIFY_MONSTER_MAP_REGISTER)},
  { 167, -1, -1, sizeof(::neo::P_S_NOTIFY_MONSTER_MAP_UNREGISTER)},
  { 175, -1, -1, sizeof(::neo::P_S_NOTIFY_ATTACK_ANI_EVENT)},
  { 185, -1, -1, sizeof(::neo::P_S_NOTIFY_CHARACTER_INFO)},
  { 192, -1, -1, sizeof(::neo::P_S_NOTIFY_MONSTER_INFO_MONSTER_DATA)},
  { 202, -1, -1, sizeof(::neo::P_S_NOTIFY_MONSTER_INFO)},
  { 211, -1, -1, sizeof(::neo::P_C_REQ_ATTACK_RANGE_HIT_EVENT)},
  { 221, -1, -1, sizeof(::neo::P_S_NOTIFY_EFFECT_EVENT)},
  { 233, -1, -1, sizeof(::neo::P_C_REQ_ATTACK_RANGE_EVENT)},
  { 248, -1, -1, sizeof(::neo::P_C_REQ_ATTACK_EVENT)},
  { 260, -1, -1, sizeof(::neo::P_S_RES_ATTACK_EVENT)},
  { 266, -1, -1, sizeof(::neo::P_S_NOTIFY_ATTACK_EVENT)},
  { 274, -1, -1, sizeof(::neo::P_C_NOTIFY_RESPAWN)},
  { 281, -1, -1, sizeof(::neo::P_NOTIFY_OBJECT_UPDATE)},
  { 287, -1, -1, sizeof(::neo::P_S_NOTIFY_CHANNEL_INFO_CHANNEL_DATA)},
  { 296, -1, -1, sizeof(::neo::P_S_NOTIFY_CHANNEL_INFO)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::neo::_Header_default_instance_._instance,
  &::neo::_P_C_REQ_LOGIN_default_instance_._instance,
  &::neo::_P_S_RES_LOGOUT_default_instance_._instance,
  &::neo::_P_C_REQ_LOGOUT_default_instance_._instance,
  &::neo::_P_S_RES_LOGIN_default_instance_._instance,
  &::neo::_P_C_NOTIFY_PING_default_instance_._instance,
  &::neo::_P_S_NOTIFY_PING_default_instance_._instance,
  &::neo::_P_C_UPDATE_CHAR_POSITION_default_instance_._instance,
  &::neo::_GAME_OBJECT_default_instance_._instance,
  &::neo::_P_S_NOTIFY_MONSTER_POSITION_MONSTER_POSITION_default_instance_._instance,
  &::neo::_P_S_NOTIFY_MONSTER_POSITION_default_instance_._instance,
  &::neo::_P_C_REQ_CHANNEL_REGISTER_default_instance_._instance,
  &::neo::_P_S_RES_CHANNEL_REGISTER_default_instance_._instance,
  &::neo::_P_C_NOTIFY_CHANNEL_UNREGISTER_default_instance_._instance,
  &::neo::_P_C_NOTIFY_MAP_REGISTER_default_instance_._instance,
  &::neo::_P_C_REQ_CHARACTER_REGISTER_default_instance_._instance,
  &::neo::_P_S_RES_CHARACTER_REGISTER_default_instance_._instance,
  &::neo::_P_C_REQ_CHARACTER_MAP_UNREGISTER_default_instance_._instance,
  &::neo::_P_S_NOTIFY_CHARACTER_MAP_UNREGISTER_default_instance_._instance,
  &::neo::_P_S_NOTIFY_MONSTER_MAP_REGISTER_default_instance_._instance,
  &::neo::_P_S_NOTIFY_MONSTER_MAP_UNREGISTER_default_instance_._instance,
  &::neo::_P_S_NOTIFY_ATTACK_ANI_EVENT_default_instance_._instance,
  &::neo::_P_S_NOTIFY_CHARACTER_INFO_default_instance_._instance,
  &::neo::_P_S_NOTIFY_MONSTER_INFO_MONSTER_DATA_default_instance_._instance,
  &::neo::_P_S_NOTIFY_MONSTER_INFO_default_instance_._instance,
  &::neo::_P_C_REQ_ATTACK_RANGE_HIT_EVENT_default_instance_._instance,
  &::neo::_P_S_NOTIFY_EFFECT_EVENT_default_instance_._instance,
  &::neo::_P_C_REQ_ATTACK_RANGE_EVENT_default_instance_._instance,
  &::neo::_P_C_REQ_ATTACK_EVENT_default_instance_._instance,
  &::neo::_P_S_RES_ATTACK_EVENT_default_instance_._instance,
  &::neo::_P_S_NOTIFY_ATTACK_EVENT_default_instance_._instance,
  &::neo::_P_C_NOTIFY_RESPAWN_default_instance_._instance,
  &::neo::_P_NOTIFY_OBJECT_UPDATE_default_instance_._instance,
  &::neo::_P_S_NOTIFY_CHANNEL_INFO_CHANNEL_DATA_default_instance_._instance,
  &::neo::_P_S_NOTIFY_CHANNEL_INFO_default_instance_._instance,
};

const char descriptor_table_protodef_Packet_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014Packet.proto\022\003neo\"1\n\006Header\022\031\n\002id\030\001 \001("
  "\0162\r.neo.PacketID\022\014\n\004size\030\002 \001(\005\")\n\rP_C_RE"
  "Q_LOGIN\022\n\n\002id\030\001 \001(\t\022\014\n\004uuid\030\002 \001(\014\"\036\n\016P_S"
  "_RES_LOGOUT\022\014\n\004user\030\001 \001(\t\"-\n\016P_C_REQ_LOG"
  "OUT\022\r\n\005mapID\030\001 \001(\005\022\014\n\004user\030\002 \001(\t\"\?\n\rP_S_"
  "RES_LOGIN\022!\n\006result\030\001 \001(\0162\021.neo.PacketRe"
  "sult\022\013\n\003msg\030\002 \001(\t\"\037\n\017P_C_NOTIFY_PING\022\014\n\004"
  "time\030\001 \001(\003\"\037\n\017P_S_NOTIFY_PING\022\014\n\004time\030\001 "
  "\001(\003\"&\n\030P_C_UPDATE_CHAR_POSITION\022\n\n\002id\030\001 "
  "\001(\t\"\033\n\013GAME_OBJECT\022\014\n\004name\030\001 \001(\t\"\377\001\n\033P_S"
  "_NOTIFY_MONSTER_POSITION\022K\n\020monster_posi"
  "tion\030\001 \003(\01321.neo.P_S_NOTIFY_MONSTER_POSI"
  "TION.MONSTER_POSITION\032\222\001\n\020MONSTER_POSITI"
  "ON\022\021\n\tobject_id\030\001 \001(\014\022\t\n\001x\030\002 \001(\002\022\t\n\001y\030\003 "
  "\001(\002\022\t\n\001z\030\004 \001(\002\022\023\n\013voleoctiy_x\030\005 \001(\002\022\023\n\013v"
  "oleoctiy_y\030\006 \001(\002\022\r\n\005speed\030\007 \001(\002\022\021\n\tanima"
  "tion\030\010 \001(\005\";\n\030P_C_REQ_CHANNEL_REGISTER\022\014"
  "\n\004user\030\001 \001(\t\022\021\n\tchannelID\030\002 \001(\005\"]\n\030P_S_R"
  "ES_CHANNEL_REGISTER\022!\n\006result\030\001 \001(\0162\021.ne"
  "o.PacketResult\022\021\n\tchannelID\030\002 \001(\005\022\013\n\003msg"
  "\030\003 \001(\t\"O\n\035P_C_NOTIFY_CHANNEL_UNREGISTER\022"
  "\016\n\006result\030\001 \001(\005\022\021\n\tchannelID\030\002 \001(\005\022\013\n\003ms"
  "g\030\003 \001(\t\"M\n\027P_C_NOTIFY_MAP_REGISTER\022\020\n\010ma"
  "pCount\030\001 \001(\005\022\022\n\nisRegister\030\002 \001(\010\022\014\n\004name"
  "\030\003 \001(\t\"Z\n\032P_C_REQ_CHARACTER_REGISTER\022\014\n\004"
  "name\030\001 \001(\t\022\r\n\005mapID\030\002 \001(\005\022\t\n\001x\030\003 \001(\002\022\t\n\001"
  "y\030\004 \001(\002\022\t\n\001z\030\005 \001(\002\"\\\n\032P_S_RES_CHARACTER_"
  "REGISTER\022\016\n\006result\030\001 \001(\005\022\013\n\003msg\030\002 \001(\t\022!\n"
  "\007objects\030\003 \003(\0132\020.neo.GAME_OBJECT\"\?\n P_C_"
  "REQ_CHARACTER_MAP_UNREGISTER\022\r\n\005mapID\030\001 "
  "\001(\005\022\014\n\004name\030\002 \001(\t\"B\n#P_S_NOTIFY_CHARACTE"
  "R_MAP_UNREGISTER\022\r\n\005mapID\030\001 \001(\005\022\014\n\004name\030"
  "\002 \001(\t\">\n\037P_S_NOTIFY_MONSTER_MAP_REGISTER"
  "\022\r\n\005mapID\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\"@\n!P_S_NOT"
  "IFY_MONSTER_MAP_UNREGISTER\022\r\n\005mapID\030\001 \001("
  "\005\022\014\n\004name\030\002 \001(\t\"a\n\033P_S_NOTIFY_ATTACK_ANI"
  "_EVENT\022\r\n\005mapID\030\001 \001(\005\022\013\n\003dir\030\002 \001(\005\022\026\n\016an"
  "imationCount\030\003 \001(\005\022\016\n\006player\030\004 \001(\t\")\n\031P_"
  "S_NOTIFY_CHARACTER_INFO\022\014\n\004name\030\001 \001(\t\"\304\001"
  "\n\027P_S_NOTIFY_MONSTER_INFO\022\023\n\013monsterCode"
  "\030\001 \001(\005\022\013\n\003msg\030\002 \001(\t\022\?\n\014monsterDatas\030\003 \003("
  "\0132).neo.P_S_NOTIFY_MONSTER_INFO.MONSTER_"
  "DATA\032F\n\014MONSTER_DATA\022\014\n\004name\030\001 \001(\t\022\r\n\005po"
  "s_x\030\002 \001(\002\022\r\n\005pos_y\030\003 \001(\002\022\n\n\002hp\030\004 \001(\005\"f\n\036"
  "P_C_REQ_ATTACK_RANGE_HIT_EVENT\022\r\n\005mapID\030"
  "\001 \001(\005\022\022\n\nattackUser\030\002 \001(\t\022\021\n\thitObject\030\003"
  " \001(\t\022\016\n\006damage\030\004 \001(\005\"\203\001\n\027P_S_NOTIFY_EFFE"
  "CT_EVENT\022\022\n\nstartPos_x\030\001 \001(\002\022\022\n\nstartPos"
  "_y\030\002 \001(\002\022\022\n\nstartPos_z\030\003 \001(\002\022\022\n\nattackUs"
  "er\030\004 \001(\t\022\013\n\003dis\030\005 \001(\002\022\013\n\003dir\030\006 \001(\005\"\270\001\n\032P"
  "_C_REQ_ATTACK_RANGE_EVENT\022\022\n\nstartPos_x\030"
  "\001 \001(\002\022\022\n\nstartPos_y\030\002 \001(\002\022\022\n\nstartPos_z\030"
  "\003 \001(\002\022\r\n\005mapID\030\004 \001(\005\022\013\n\003dir\030\005 \001(\005\022\022\n\natt"
  "ackUser\030\006 \001(\t\022\013\n\003dis\030\007 \001(\002\022\016\n\006damage\030\010 \001"
  "(\005\022\021\n\tanimation\030\t \001(\005\"|\n\024P_C_REQ_ATTACK_"
  "EVENT\022\r\n\005mapID\030\001 \001(\005\022\022\n\nattackUser\030\002 \001(\t"
  "\022\021\n\thitObject\030\003 \001(\t\022\013\n\003dir\030\004 \001(\005\022\021\n\tanim"
  "ation\030\005 \001(\005\022\016\n\006damage\030\006 \001(\005\"\026\n\024P_S_RES_A"
  "TTACK_EVENT\"8\n\027P_S_NOTIFY_ATTACK_EVENT\022\021"
  "\n\thitObject\030\001 \001(\t\022\n\n\002HP\030\002 \001(\005\" \n\022P_C_NOT"
  "IFY_RESPAWN\022\n\n\002id\030\001 \001(\t\"\030\n\026P_NOTIFY_OBJE"
  "CT_UPDATE\"\236\001\n\027P_S_NOTIFY_CHANNEL_INFO\022\?\n"
  "\014chaanelInfos\030\001 \003(\0132).neo.P_S_NOTIFY_CHA"
  "NNEL_INFO.CHANNEL_DATA\032B\n\014CHANNEL_DATA\022\014"
  "\n\004name\030\001 \001(\t\022\021\n\tuserCount\030\002 \001(\005\022\021\n\tchann"
  "elID\030\003 \001(\005*\203\010\n\010PacketID\022\022\n\016PI_TEST_PACKE"
  "T\020\000\022\024\n\020PI_C_NOTIFY_PING\020\001\022\024\n\020PI_S_NOTIFY"
  "_PING\020\002\022\035\n\031PI_C_UPDATE_CHAR_POSITION\020d\022\036"
  "\n\031PI_S_NOTIFY_CHAR_POSITION\020\310\001\022\034\n\027PI_S_N"
  "OTIFY_CHAR_UDPATE\020\311\001\022!\n\034PI_S_NOTIFY_MONS"
  "TER_POSITION\020\254\002\022\024\n\017PI_S_RES_LOGOUT\020\346\007\022\024\n"
  "\017PI_C_REQ_LOGOUT\020\347\007\022\023\n\016PI_C_REQ_LOGIN\020\350\007"
  "\022\023\n\016PI_S_RES_LOGIN\020\320\017\022\036\n\031PI_C_REQ_CHANNE"
  "L_REGISTER\020\270\027\022\036\n\031PI_S_RES_CHANNEL_REGIST"
  "ER\020\271\027\022#\n\036PI_C_NOTIFY_CHANNEL_UNREGISTER\020"
  "\272\027\022\035\n\030PI_C_NOTIFY_MAP_REGISTER\020\273\027\022 \n\033PI_"
  "C_REQ_CHARACTER_REGISTER\020\234\030\022 \n\033PI_S_RES_"
  "CHARACTER_REGISTER\020\235\030\022&\n!PI_C_REQ_CHARAC"
  "TER_MAP_UNREGISTER\020\236\030\022)\n$PI_S_NOTIFY_CHA"
  "RACTER_MAP_UNREGISTER\020\237\030\022%\n PI_S_NOTIFY_"
  "MONSTER_MAP_REGISTER\020\246\030\022\'\n\"PI_S_NOTIFY_M"
  "ONSTER_MAP_UNREGISTER\020\247\030\022!\n\034PI_S_NOTIFY_"
  "ATTACK_ANI_EVENT\020\316\030\022\037\n\032PI_S_NOTIFY_CHARA"
  "CTER_INFO\020\202\031\022\035\n\030PI_S_NOTIFY_MONSTER_INFO"
  "\020\344\031\022$\n\037PI_C_REQ_ATTACK_RANGE_HIT_EVENT\020\251"
  "\033\022\035\n\030PI_S_NOTIFY_EFFECT_EVENT\020\252\033\022 \n\033PI_C"
  "_REQ_ATTACK_RANGE_EVENT\020\253\033\022\032\n\025PI_C_REQ_A"
  "TTACK_EVENT\020\254\033\022\032\n\025PI_S_RES_ATTACK_EVENT\020"
  "\255\033\022\035\n\030PI_S_NOTIFY_ATTACK_EVENT\020\256\033\022\030\n\023PI_"
  "C_NOTIFY_RESPAWN\020\257\033\022\034\n\027PI_NOTIFY_OBJECT_"
  "UPDATE\020\266\033\022\035\n\030PI_S_NOTIFY_CHANNEL_INFO\020\237\037"
  "*\'\n\014PacketResult\022\013\n\007SUCCESS\020\000\022\n\n\006FAILED\020"
  "\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_Packet_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Packet_2eproto = {
    false, false, 3689, descriptor_table_protodef_Packet_2eproto,
    "Packet.proto",
    &descriptor_table_Packet_2eproto_once, nullptr, 0, 35,
    schemas, file_default_instances, TableStruct_Packet_2eproto::offsets,
    file_level_metadata_Packet_2eproto, file_level_enum_descriptors_Packet_2eproto,
    file_level_service_descriptors_Packet_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Packet_2eproto_getter() {
  return &descriptor_table_Packet_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Packet_2eproto(&descriptor_table_Packet_2eproto);
namespace neo {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PacketID_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Packet_2eproto);
  return file_level_enum_descriptors_Packet_2eproto[0];
}
bool PacketID_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 100:
    case 200:
    case 201:
    case 300:
    case 998:
    case 999:
    case 1000:
    case 2000:
    case 3000:
    case 3001:
    case 3002:
    case 3003:
    case 3100:
    case 3101:
    case 3102:
    case 3103:
    case 3110:
    case 3111:
    case 3150:
    case 3202:
    case 3300:
    case 3497:
    case 3498:
    case 3499:
    case 3500:
    case 3501:
    case 3502:
    case 3503:
    case 3510:
    case 3999:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PacketResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Packet_2eproto);
  return file_level_enum_descriptors_Packet_2eproto[1];
}
bool PacketResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Header::_Internal {
 public:
};

Header::Header(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:neo.Header)
}
Header::Header(const Header& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Header* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.size_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.size_));
  // @@protoc_insertion_point(copy_constructor:neo.Header)
}

inline void Header::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0}
    , decltype(_impl_.size_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:neo.Header)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Header::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Header::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:neo.Header)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.size_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Header::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .neo.PacketID id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_id(static_cast<::neo::PacketID>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Header::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:neo.Header)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .neo.PacketID id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // int32 size = 2;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:neo.Header)
  return target;
}

size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:neo.Header)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .neo.PacketID id = 1;
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_id());
  }

  // int32 size = 2;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Header::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Header::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Header::GetClassData() const { return &_class_data_; }


void Header::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Header*>(&to_msg);
  auto& from = static_cast<const Header&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:neo.Header)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:neo.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  return true;
}

void Header::InternalSwap(Header* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Header, _impl_.size_)
      + sizeof(Header::_impl_.size_)
      - PROTOBUF_FIELD_OFFSET(Header, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Header::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_2eproto_getter, &descriptor_table_Packet_2eproto_once,
      file_level_metadata_Packet_2eproto[0]);
}

// ===================================================================

class P_C_REQ_LOGIN::_Internal {
 public:
};

P_C_REQ_LOGIN::P_C_REQ_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:neo.P_C_REQ_LOGIN)
}
P_C_REQ_LOGIN::P_C_REQ_LOGIN(const P_C_REQ_LOGIN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  P_C_REQ_LOGIN* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.uuid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uuid().empty()) {
    _this->_impl_.uuid_.Set(from._internal_uuid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:neo.P_C_REQ_LOGIN)
}

inline void P_C_REQ_LOGIN::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.uuid_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

P_C_REQ_LOGIN::~P_C_REQ_LOGIN() {
  // @@protoc_insertion_point(destructor:neo.P_C_REQ_LOGIN)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void P_C_REQ_LOGIN::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.uuid_.Destroy();
}

void P_C_REQ_LOGIN::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void P_C_REQ_LOGIN::Clear() {
// @@protoc_insertion_point(message_clear_start:neo.P_C_REQ_LOGIN)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.uuid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* P_C_REQ_LOGIN::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "neo.P_C_REQ_LOGIN.id"));
        } else
          goto handle_unusual;
        continue;
      // bytes uuid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_uuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* P_C_REQ_LOGIN::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:neo.P_C_REQ_LOGIN)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "neo.P_C_REQ_LOGIN.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // bytes uuid = 2;
  if (!this->_internal_uuid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_uuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:neo.P_C_REQ_LOGIN)
  return target;
}

size_t P_C_REQ_LOGIN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:neo.P_C_REQ_LOGIN)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // bytes uuid = 2;
  if (!this->_internal_uuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_uuid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData P_C_REQ_LOGIN::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    P_C_REQ_LOGIN::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*P_C_REQ_LOGIN::GetClassData() const { return &_class_data_; }


void P_C_REQ_LOGIN::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<P_C_REQ_LOGIN*>(&to_msg);
  auto& from = static_cast<const P_C_REQ_LOGIN&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:neo.P_C_REQ_LOGIN)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_uuid().empty()) {
    _this->_internal_set_uuid(from._internal_uuid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void P_C_REQ_LOGIN::CopyFrom(const P_C_REQ_LOGIN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:neo.P_C_REQ_LOGIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P_C_REQ_LOGIN::IsInitialized() const {
  return true;
}

void P_C_REQ_LOGIN::InternalSwap(P_C_REQ_LOGIN* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uuid_, lhs_arena,
      &other->_impl_.uuid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata P_C_REQ_LOGIN::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_2eproto_getter, &descriptor_table_Packet_2eproto_once,
      file_level_metadata_Packet_2eproto[1]);
}

// ===================================================================

class P_S_RES_LOGOUT::_Internal {
 public:
};

P_S_RES_LOGOUT::P_S_RES_LOGOUT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:neo.P_S_RES_LOGOUT)
}
P_S_RES_LOGOUT::P_S_RES_LOGOUT(const P_S_RES_LOGOUT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  P_S_RES_LOGOUT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user().empty()) {
    _this->_impl_.user_.Set(from._internal_user(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:neo.P_S_RES_LOGOUT)
}

inline void P_S_RES_LOGOUT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

P_S_RES_LOGOUT::~P_S_RES_LOGOUT() {
  // @@protoc_insertion_point(destructor:neo.P_S_RES_LOGOUT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void P_S_RES_LOGOUT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_.Destroy();
}

void P_S_RES_LOGOUT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void P_S_RES_LOGOUT::Clear() {
// @@protoc_insertion_point(message_clear_start:neo.P_S_RES_LOGOUT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* P_S_RES_LOGOUT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "neo.P_S_RES_LOGOUT.user"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* P_S_RES_LOGOUT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:neo.P_S_RES_LOGOUT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user = 1;
  if (!this->_internal_user().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user().data(), static_cast<int>(this->_internal_user().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "neo.P_S_RES_LOGOUT.user");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:neo.P_S_RES_LOGOUT)
  return target;
}

size_t P_S_RES_LOGOUT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:neo.P_S_RES_LOGOUT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user = 1;
  if (!this->_internal_user().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData P_S_RES_LOGOUT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    P_S_RES_LOGOUT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*P_S_RES_LOGOUT::GetClassData() const { return &_class_data_; }


void P_S_RES_LOGOUT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<P_S_RES_LOGOUT*>(&to_msg);
  auto& from = static_cast<const P_S_RES_LOGOUT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:neo.P_S_RES_LOGOUT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user().empty()) {
    _this->_internal_set_user(from._internal_user());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void P_S_RES_LOGOUT::CopyFrom(const P_S_RES_LOGOUT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:neo.P_S_RES_LOGOUT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P_S_RES_LOGOUT::IsInitialized() const {
  return true;
}

void P_S_RES_LOGOUT::InternalSwap(P_S_RES_LOGOUT* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_, lhs_arena,
      &other->_impl_.user_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata P_S_RES_LOGOUT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_2eproto_getter, &descriptor_table_Packet_2eproto_once,
      file_level_metadata_Packet_2eproto[2]);
}

// ===================================================================

class P_C_REQ_LOGOUT::_Internal {
 public:
};

P_C_REQ_LOGOUT::P_C_REQ_LOGOUT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:neo.P_C_REQ_LOGOUT)
}
P_C_REQ_LOGOUT::P_C_REQ_LOGOUT(const P_C_REQ_LOGOUT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  P_C_REQ_LOGOUT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_){}
    , decltype(_impl_.mapid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user().empty()) {
    _this->_impl_.user_.Set(from._internal_user(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.mapid_ = from._impl_.mapid_;
  // @@protoc_insertion_point(copy_constructor:neo.P_C_REQ_LOGOUT)
}

inline void P_C_REQ_LOGOUT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_){}
    , decltype(_impl_.mapid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

P_C_REQ_LOGOUT::~P_C_REQ_LOGOUT() {
  // @@protoc_insertion_point(destructor:neo.P_C_REQ_LOGOUT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void P_C_REQ_LOGOUT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_.Destroy();
}

void P_C_REQ_LOGOUT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void P_C_REQ_LOGOUT::Clear() {
// @@protoc_insertion_point(message_clear_start:neo.P_C_REQ_LOGOUT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_.ClearToEmpty();
  _impl_.mapid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* P_C_REQ_LOGOUT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 mapID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.mapid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string user = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_user();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "neo.P_C_REQ_LOGOUT.user"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* P_C_REQ_LOGOUT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:neo.P_C_REQ_LOGOUT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mapID = 1;
  if (this->_internal_mapid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_mapid(), target);
  }

  // string user = 2;
  if (!this->_internal_user().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user().data(), static_cast<int>(this->_internal_user().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "neo.P_C_REQ_LOGOUT.user");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:neo.P_C_REQ_LOGOUT)
  return target;
}

size_t P_C_REQ_LOGOUT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:neo.P_C_REQ_LOGOUT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user = 2;
  if (!this->_internal_user().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user());
  }

  // int32 mapID = 1;
  if (this->_internal_mapid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mapid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData P_C_REQ_LOGOUT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    P_C_REQ_LOGOUT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*P_C_REQ_LOGOUT::GetClassData() const { return &_class_data_; }


void P_C_REQ_LOGOUT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<P_C_REQ_LOGOUT*>(&to_msg);
  auto& from = static_cast<const P_C_REQ_LOGOUT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:neo.P_C_REQ_LOGOUT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user().empty()) {
    _this->_internal_set_user(from._internal_user());
  }
  if (from._internal_mapid() != 0) {
    _this->_internal_set_mapid(from._internal_mapid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void P_C_REQ_LOGOUT::CopyFrom(const P_C_REQ_LOGOUT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:neo.P_C_REQ_LOGOUT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P_C_REQ_LOGOUT::IsInitialized() const {
  return true;
}

void P_C_REQ_LOGOUT::InternalSwap(P_C_REQ_LOGOUT* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_, lhs_arena,
      &other->_impl_.user_, rhs_arena
  );
  swap(_impl_.mapid_, other->_impl_.mapid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata P_C_REQ_LOGOUT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_2eproto_getter, &descriptor_table_Packet_2eproto_once,
      file_level_metadata_Packet_2eproto[3]);
}

// ===================================================================

class P_S_RES_LOGIN::_Internal {
 public:
};

P_S_RES_LOGIN::P_S_RES_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:neo.P_S_RES_LOGIN)
}
P_S_RES_LOGIN::P_S_RES_LOGIN(const P_S_RES_LOGIN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  P_S_RES_LOGIN* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){}
    , decltype(_impl_.result_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    _this->_impl_.msg_.Set(from._internal_msg(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.result_ = from._impl_.result_;
  // @@protoc_insertion_point(copy_constructor:neo.P_S_RES_LOGIN)
}

inline void P_S_RES_LOGIN::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){}
    , decltype(_impl_.result_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

P_S_RES_LOGIN::~P_S_RES_LOGIN() {
  // @@protoc_insertion_point(destructor:neo.P_S_RES_LOGIN)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void P_S_RES_LOGIN::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msg_.Destroy();
}

void P_S_RES_LOGIN::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void P_S_RES_LOGIN::Clear() {
// @@protoc_insertion_point(message_clear_start:neo.P_S_RES_LOGIN)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.msg_.ClearToEmpty();
  _impl_.result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* P_S_RES_LOGIN::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .neo.PacketResult result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::neo::PacketResult>(val));
        } else
          goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "neo.P_S_RES_LOGIN.msg"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* P_S_RES_LOGIN::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:neo.P_S_RES_LOGIN)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .neo.PacketResult result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "neo.P_S_RES_LOGIN.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:neo.P_S_RES_LOGIN)
  return target;
}

size_t P_S_RES_LOGIN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:neo.P_S_RES_LOGIN)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // .neo.PacketResult result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData P_S_RES_LOGIN::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    P_S_RES_LOGIN::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*P_S_RES_LOGIN::GetClassData() const { return &_class_data_; }


void P_S_RES_LOGIN::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<P_S_RES_LOGIN*>(&to_msg);
  auto& from = static_cast<const P_S_RES_LOGIN&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:neo.P_S_RES_LOGIN)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _this->_internal_set_msg(from._internal_msg());
  }
  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void P_S_RES_LOGIN::CopyFrom(const P_S_RES_LOGIN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:neo.P_S_RES_LOGIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P_S_RES_LOGIN::IsInitialized() const {
  return true;
}

void P_S_RES_LOGIN::InternalSwap(P_S_RES_LOGIN* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_, lhs_arena,
      &other->_impl_.msg_, rhs_arena
  );
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata P_S_RES_LOGIN::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_2eproto_getter, &descriptor_table_Packet_2eproto_once,
      file_level_metadata_Packet_2eproto[4]);
}

// ===================================================================

class P_C_NOTIFY_PING::_Internal {
 public:
};

P_C_NOTIFY_PING::P_C_NOTIFY_PING(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:neo.P_C_NOTIFY_PING)
}
P_C_NOTIFY_PING::P_C_NOTIFY_PING(const P_C_NOTIFY_PING& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  P_C_NOTIFY_PING* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.time_ = from._impl_.time_;
  // @@protoc_insertion_point(copy_constructor:neo.P_C_NOTIFY_PING)
}

inline void P_C_NOTIFY_PING::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.time_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

P_C_NOTIFY_PING::~P_C_NOTIFY_PING() {
  // @@protoc_insertion_point(destructor:neo.P_C_NOTIFY_PING)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void P_C_NOTIFY_PING::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void P_C_NOTIFY_PING::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void P_C_NOTIFY_PING::Clear() {
// @@protoc_insertion_point(message_clear_start:neo.P_C_NOTIFY_PING)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.time_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* P_C_NOTIFY_PING::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* P_C_NOTIFY_PING::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:neo.P_C_NOTIFY_PING)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:neo.P_C_NOTIFY_PING)
  return target;
}

size_t P_C_NOTIFY_PING::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:neo.P_C_NOTIFY_PING)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->_internal_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData P_C_NOTIFY_PING::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    P_C_NOTIFY_PING::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*P_C_NOTIFY_PING::GetClassData() const { return &_class_data_; }


void P_C_NOTIFY_PING::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<P_C_NOTIFY_PING*>(&to_msg);
  auto& from = static_cast<const P_C_NOTIFY_PING&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:neo.P_C_NOTIFY_PING)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_time() != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void P_C_NOTIFY_PING::CopyFrom(const P_C_NOTIFY_PING& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:neo.P_C_NOTIFY_PING)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P_C_NOTIFY_PING::IsInitialized() const {
  return true;
}

void P_C_NOTIFY_PING::InternalSwap(P_C_NOTIFY_PING* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.time_, other->_impl_.time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata P_C_NOTIFY_PING::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_2eproto_getter, &descriptor_table_Packet_2eproto_once,
      file_level_metadata_Packet_2eproto[5]);
}

// ===================================================================

class P_S_NOTIFY_PING::_Internal {
 public:
};

P_S_NOTIFY_PING::P_S_NOTIFY_PING(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:neo.P_S_NOTIFY_PING)
}
P_S_NOTIFY_PING::P_S_NOTIFY_PING(const P_S_NOTIFY_PING& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  P_S_NOTIFY_PING* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.time_ = from._impl_.time_;
  // @@protoc_insertion_point(copy_constructor:neo.P_S_NOTIFY_PING)
}

inline void P_S_NOTIFY_PING::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.time_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

P_S_NOTIFY_PING::~P_S_NOTIFY_PING() {
  // @@protoc_insertion_point(destructor:neo.P_S_NOTIFY_PING)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void P_S_NOTIFY_PING::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void P_S_NOTIFY_PING::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void P_S_NOTIFY_PING::Clear() {
// @@protoc_insertion_point(message_clear_start:neo.P_S_NOTIFY_PING)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.time_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* P_S_NOTIFY_PING::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* P_S_NOTIFY_PING::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:neo.P_S_NOTIFY_PING)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:neo.P_S_NOTIFY_PING)
  return target;
}

size_t P_S_NOTIFY_PING::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:neo.P_S_NOTIFY_PING)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->_internal_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData P_S_NOTIFY_PING::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    P_S_NOTIFY_PING::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*P_S_NOTIFY_PING::GetClassData() const { return &_class_data_; }


void P_S_NOTIFY_PING::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<P_S_NOTIFY_PING*>(&to_msg);
  auto& from = static_cast<const P_S_NOTIFY_PING&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:neo.P_S_NOTIFY_PING)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_time() != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void P_S_NOTIFY_PING::CopyFrom(const P_S_NOTIFY_PING& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:neo.P_S_NOTIFY_PING)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P_S_NOTIFY_PING::IsInitialized() const {
  return true;
}

void P_S_NOTIFY_PING::InternalSwap(P_S_NOTIFY_PING* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.time_, other->_impl_.time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata P_S_NOTIFY_PING::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_2eproto_getter, &descriptor_table_Packet_2eproto_once,
      file_level_metadata_Packet_2eproto[6]);
}

// ===================================================================

class P_C_UPDATE_CHAR_POSITION::_Internal {
 public:
};

P_C_UPDATE_CHAR_POSITION::P_C_UPDATE_CHAR_POSITION(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:neo.P_C_UPDATE_CHAR_POSITION)
}
P_C_UPDATE_CHAR_POSITION::P_C_UPDATE_CHAR_POSITION(const P_C_UPDATE_CHAR_POSITION& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  P_C_UPDATE_CHAR_POSITION* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:neo.P_C_UPDATE_CHAR_POSITION)
}

inline void P_C_UPDATE_CHAR_POSITION::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

P_C_UPDATE_CHAR_POSITION::~P_C_UPDATE_CHAR_POSITION() {
  // @@protoc_insertion_point(destructor:neo.P_C_UPDATE_CHAR_POSITION)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void P_C_UPDATE_CHAR_POSITION::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
}

void P_C_UPDATE_CHAR_POSITION::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void P_C_UPDATE_CHAR_POSITION::Clear() {
// @@protoc_insertion_point(message_clear_start:neo.P_C_UPDATE_CHAR_POSITION)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* P_C_UPDATE_CHAR_POSITION::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "neo.P_C_UPDATE_CHAR_POSITION.id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* P_C_UPDATE_CHAR_POSITION::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:neo.P_C_UPDATE_CHAR_POSITION)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "neo.P_C_UPDATE_CHAR_POSITION.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:neo.P_C_UPDATE_CHAR_POSITION)
  return target;
}

size_t P_C_UPDATE_CHAR_POSITION::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:neo.P_C_UPDATE_CHAR_POSITION)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData P_C_UPDATE_CHAR_POSITION::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    P_C_UPDATE_CHAR_POSITION::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*P_C_UPDATE_CHAR_POSITION::GetClassData() const { return &_class_data_; }


void P_C_UPDATE_CHAR_POSITION::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<P_C_UPDATE_CHAR_POSITION*>(&to_msg);
  auto& from = static_cast<const P_C_UPDATE_CHAR_POSITION&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:neo.P_C_UPDATE_CHAR_POSITION)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void P_C_UPDATE_CHAR_POSITION::CopyFrom(const P_C_UPDATE_CHAR_POSITION& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:neo.P_C_UPDATE_CHAR_POSITION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P_C_UPDATE_CHAR_POSITION::IsInitialized() const {
  return true;
}

void P_C_UPDATE_CHAR_POSITION::InternalSwap(P_C_UPDATE_CHAR_POSITION* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata P_C_UPDATE_CHAR_POSITION::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_2eproto_getter, &descriptor_table_Packet_2eproto_once,
      file_level_metadata_Packet_2eproto[7]);
}

// ===================================================================

class GAME_OBJECT::_Internal {
 public:
};

GAME_OBJECT::GAME_OBJECT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:neo.GAME_OBJECT)
}
GAME_OBJECT::GAME_OBJECT(const GAME_OBJECT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GAME_OBJECT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:neo.GAME_OBJECT)
}

inline void GAME_OBJECT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GAME_OBJECT::~GAME_OBJECT() {
  // @@protoc_insertion_point(destructor:neo.GAME_OBJECT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GAME_OBJECT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void GAME_OBJECT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GAME_OBJECT::Clear() {
// @@protoc_insertion_point(message_clear_start:neo.GAME_OBJECT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GAME_OBJECT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "neo.GAME_OBJECT.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GAME_OBJECT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:neo.GAME_OBJECT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "neo.GAME_OBJECT.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:neo.GAME_OBJECT)
  return target;
}

size_t GAME_OBJECT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:neo.GAME_OBJECT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GAME_OBJECT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GAME_OBJECT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GAME_OBJECT::GetClassData() const { return &_class_data_; }


void GAME_OBJECT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GAME_OBJECT*>(&to_msg);
  auto& from = static_cast<const GAME_OBJECT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:neo.GAME_OBJECT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GAME_OBJECT::CopyFrom(const GAME_OBJECT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:neo.GAME_OBJECT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GAME_OBJECT::IsInitialized() const {
  return true;
}

void GAME_OBJECT::InternalSwap(GAME_OBJECT* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GAME_OBJECT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_2eproto_getter, &descriptor_table_Packet_2eproto_once,
      file_level_metadata_Packet_2eproto[8]);
}

// ===================================================================

class P_S_NOTIFY_MONSTER_POSITION_MONSTER_POSITION::_Internal {
 public:
};

P_S_NOTIFY_MONSTER_POSITION_MONSTER_POSITION::P_S_NOTIFY_MONSTER_POSITION_MONSTER_POSITION(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:neo.P_S_NOTIFY_MONSTER_POSITION.MONSTER_POSITION)
}
P_S_NOTIFY_MONSTER_POSITION_MONSTER_POSITION::P_S_NOTIFY_MONSTER_POSITION_MONSTER_POSITION(const P_S_NOTIFY_MONSTER_POSITION_MONSTER_POSITION& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  P_S_NOTIFY_MONSTER_POSITION_MONSTER_POSITION* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , decltype(_impl_.voleoctiy_x_){}
    , decltype(_impl_.voleoctiy_y_){}
    , decltype(_impl_.speed_){}
    , decltype(_impl_.animation_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.object_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.object_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_object_id().empty()) {
    _this->_impl_.object_id_.Set(from._internal_object_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.animation_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.animation_));
  // @@protoc_insertion_point(copy_constructor:neo.P_S_NOTIFY_MONSTER_POSITION.MONSTER_POSITION)
}

inline void P_S_NOTIFY_MONSTER_POSITION_MONSTER_POSITION::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , decltype(_impl_.voleoctiy_x_){0}
    , decltype(_impl_.voleoctiy_y_){0}
    , decltype(_impl_.speed_){0}
    , decltype(_impl_.animation_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.object_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.object_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

P_S_NOTIFY_MONSTER_POSITION_MONSTER_POSITION::~P_S_NOTIFY_MONSTER_POSITION_MONSTER_POSITION() {
  // @@protoc_insertion_point(destructor:neo.P_S_NOTIFY_MONSTER_POSITION.MONSTER_POSITION)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void P_S_NOTIFY_MONSTER_POSITION_MONSTER_POSITION::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.object_id_.Destroy();
}

void P_S_NOTIFY_MONSTER_POSITION_MONSTER_POSITION::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void P_S_NOTIFY_MONSTER_POSITION_MONSTER_POSITION::Clear() {
// @@protoc_insertion_point(message_clear_start:neo.P_S_NOTIFY_MONSTER_POSITION.MONSTER_POSITION)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.object_id_.ClearToEmpty();
  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.animation_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.animation_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* P_S_NOTIFY_MONSTER_POSITION_MONSTER_POSITION::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_object_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float voleoctiy_x = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.voleoctiy_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float voleoctiy_y = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.voleoctiy_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float speed = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 animation = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.animation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* P_S_NOTIFY_MONSTER_POSITION_MONSTER_POSITION::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:neo.P_S_NOTIFY_MONSTER_POSITION.MONSTER_POSITION)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes object_id = 1;
  if (!this->_internal_object_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_object_id(), target);
  }

  // float x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // float y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
  }

  // float z = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_z(), target);
  }

  // float voleoctiy_x = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_voleoctiy_x = this->_internal_voleoctiy_x();
  uint32_t raw_voleoctiy_x;
  memcpy(&raw_voleoctiy_x, &tmp_voleoctiy_x, sizeof(tmp_voleoctiy_x));
  if (raw_voleoctiy_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_voleoctiy_x(), target);
  }

  // float voleoctiy_y = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_voleoctiy_y = this->_internal_voleoctiy_y();
  uint32_t raw_voleoctiy_y;
  memcpy(&raw_voleoctiy_y, &tmp_voleoctiy_y, sizeof(tmp_voleoctiy_y));
  if (raw_voleoctiy_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_voleoctiy_y(), target);
  }

  // float speed = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed = this->_internal_speed();
  uint32_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_speed(), target);
  }

  // int32 animation = 8;
  if (this->_internal_animation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_animation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:neo.P_S_NOTIFY_MONSTER_POSITION.MONSTER_POSITION)
  return target;
}

size_t P_S_NOTIFY_MONSTER_POSITION_MONSTER_POSITION::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:neo.P_S_NOTIFY_MONSTER_POSITION.MONSTER_POSITION)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes object_id = 1;
  if (!this->_internal_object_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_object_id());
  }

  // float x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float z = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 4;
  }

  // float voleoctiy_x = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_voleoctiy_x = this->_internal_voleoctiy_x();
  uint32_t raw_voleoctiy_x;
  memcpy(&raw_voleoctiy_x, &tmp_voleoctiy_x, sizeof(tmp_voleoctiy_x));
  if (raw_voleoctiy_x != 0) {
    total_size += 1 + 4;
  }

  // float voleoctiy_y = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_voleoctiy_y = this->_internal_voleoctiy_y();
  uint32_t raw_voleoctiy_y;
  memcpy(&raw_voleoctiy_y, &tmp_voleoctiy_y, sizeof(tmp_voleoctiy_y));
  if (raw_voleoctiy_y != 0) {
    total_size += 1 + 4;
  }

  // float speed = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed = this->_internal_speed();
  uint32_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    total_size += 1 + 4;
  }

  // int32 animation = 8;
  if (this->_internal_animation() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_animation());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData P_S_NOTIFY_MONSTER_POSITION_MONSTER_POSITION::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    P_S_NOTIFY_MONSTER_POSITION_MONSTER_POSITION::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*P_S_NOTIFY_MONSTER_POSITION_MONSTER_POSITION::GetClassData() const { return &_class_data_; }


void P_S_NOTIFY_MONSTER_POSITION_MONSTER_POSITION::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<P_S_NOTIFY_MONSTER_POSITION_MONSTER_POSITION*>(&to_msg);
  auto& from = static_cast<const P_S_NOTIFY_MONSTER_POSITION_MONSTER_POSITION&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:neo.P_S_NOTIFY_MONSTER_POSITION.MONSTER_POSITION)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_object_id().empty()) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_voleoctiy_x = from._internal_voleoctiy_x();
  uint32_t raw_voleoctiy_x;
  memcpy(&raw_voleoctiy_x, &tmp_voleoctiy_x, sizeof(tmp_voleoctiy_x));
  if (raw_voleoctiy_x != 0) {
    _this->_internal_set_voleoctiy_x(from._internal_voleoctiy_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_voleoctiy_y = from._internal_voleoctiy_y();
  uint32_t raw_voleoctiy_y;
  memcpy(&raw_voleoctiy_y, &tmp_voleoctiy_y, sizeof(tmp_voleoctiy_y));
  if (raw_voleoctiy_y != 0) {
    _this->_internal_set_voleoctiy_y(from._internal_voleoctiy_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed = from._internal_speed();
  uint32_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    _this->_internal_set_speed(from._internal_speed());
  }
  if (from._internal_animation() != 0) {
    _this->_internal_set_animation(from._internal_animation());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void P_S_NOTIFY_MONSTER_POSITION_MONSTER_POSITION::CopyFrom(const P_S_NOTIFY_MONSTER_POSITION_MONSTER_POSITION& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:neo.P_S_NOTIFY_MONSTER_POSITION.MONSTER_POSITION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P_S_NOTIFY_MONSTER_POSITION_MONSTER_POSITION::IsInitialized() const {
  return true;
}

void P_S_NOTIFY_MONSTER_POSITION_MONSTER_POSITION::InternalSwap(P_S_NOTIFY_MONSTER_POSITION_MONSTER_POSITION* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.object_id_, lhs_arena,
      &other->_impl_.object_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(P_S_NOTIFY_MONSTER_POSITION_MONSTER_POSITION, _impl_.animation_)
      + sizeof(P_S_NOTIFY_MONSTER_POSITION_MONSTER_POSITION::_impl_.animation_)
      - PROTOBUF_FIELD_OFFSET(P_S_NOTIFY_MONSTER_POSITION_MONSTER_POSITION, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata P_S_NOTIFY_MONSTER_POSITION_MONSTER_POSITION::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_2eproto_getter, &descriptor_table_Packet_2eproto_once,
      file_level_metadata_Packet_2eproto[9]);
}

// ===================================================================

class P_S_NOTIFY_MONSTER_POSITION::_Internal {
 public:
};

P_S_NOTIFY_MONSTER_POSITION::P_S_NOTIFY_MONSTER_POSITION(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:neo.P_S_NOTIFY_MONSTER_POSITION)
}
P_S_NOTIFY_MONSTER_POSITION::P_S_NOTIFY_MONSTER_POSITION(const P_S_NOTIFY_MONSTER_POSITION& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  P_S_NOTIFY_MONSTER_POSITION* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.monster_position_){from._impl_.monster_position_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:neo.P_S_NOTIFY_MONSTER_POSITION)
}

inline void P_S_NOTIFY_MONSTER_POSITION::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.monster_position_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

P_S_NOTIFY_MONSTER_POSITION::~P_S_NOTIFY_MONSTER_POSITION() {
  // @@protoc_insertion_point(destructor:neo.P_S_NOTIFY_MONSTER_POSITION)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void P_S_NOTIFY_MONSTER_POSITION::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.monster_position_.~RepeatedPtrField();
}

void P_S_NOTIFY_MONSTER_POSITION::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void P_S_NOTIFY_MONSTER_POSITION::Clear() {
// @@protoc_insertion_point(message_clear_start:neo.P_S_NOTIFY_MONSTER_POSITION)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.monster_position_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* P_S_NOTIFY_MONSTER_POSITION::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .neo.P_S_NOTIFY_MONSTER_POSITION.MONSTER_POSITION monster_position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_monster_position(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* P_S_NOTIFY_MONSTER_POSITION::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:neo.P_S_NOTIFY_MONSTER_POSITION)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .neo.P_S_NOTIFY_MONSTER_POSITION.MONSTER_POSITION monster_position = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_monster_position_size()); i < n; i++) {
    const auto& repfield = this->_internal_monster_position(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:neo.P_S_NOTIFY_MONSTER_POSITION)
  return target;
}

size_t P_S_NOTIFY_MONSTER_POSITION::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:neo.P_S_NOTIFY_MONSTER_POSITION)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .neo.P_S_NOTIFY_MONSTER_POSITION.MONSTER_POSITION monster_position = 1;
  total_size += 1UL * this->_internal_monster_position_size();
  for (const auto& msg : this->_impl_.monster_position_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData P_S_NOTIFY_MONSTER_POSITION::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    P_S_NOTIFY_MONSTER_POSITION::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*P_S_NOTIFY_MONSTER_POSITION::GetClassData() const { return &_class_data_; }


void P_S_NOTIFY_MONSTER_POSITION::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<P_S_NOTIFY_MONSTER_POSITION*>(&to_msg);
  auto& from = static_cast<const P_S_NOTIFY_MONSTER_POSITION&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:neo.P_S_NOTIFY_MONSTER_POSITION)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.monster_position_.MergeFrom(from._impl_.monster_position_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void P_S_NOTIFY_MONSTER_POSITION::CopyFrom(const P_S_NOTIFY_MONSTER_POSITION& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:neo.P_S_NOTIFY_MONSTER_POSITION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P_S_NOTIFY_MONSTER_POSITION::IsInitialized() const {
  return true;
}

void P_S_NOTIFY_MONSTER_POSITION::InternalSwap(P_S_NOTIFY_MONSTER_POSITION* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.monster_position_.InternalSwap(&other->_impl_.monster_position_);
}

::PROTOBUF_NAMESPACE_ID::Metadata P_S_NOTIFY_MONSTER_POSITION::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_2eproto_getter, &descriptor_table_Packet_2eproto_once,
      file_level_metadata_Packet_2eproto[10]);
}

// ===================================================================

class P_C_REQ_CHANNEL_REGISTER::_Internal {
 public:
};

P_C_REQ_CHANNEL_REGISTER::P_C_REQ_CHANNEL_REGISTER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:neo.P_C_REQ_CHANNEL_REGISTER)
}
P_C_REQ_CHANNEL_REGISTER::P_C_REQ_CHANNEL_REGISTER(const P_C_REQ_CHANNEL_REGISTER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  P_C_REQ_CHANNEL_REGISTER* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_){}
    , decltype(_impl_.channelid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user().empty()) {
    _this->_impl_.user_.Set(from._internal_user(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.channelid_ = from._impl_.channelid_;
  // @@protoc_insertion_point(copy_constructor:neo.P_C_REQ_CHANNEL_REGISTER)
}

inline void P_C_REQ_CHANNEL_REGISTER::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_){}
    , decltype(_impl_.channelid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

P_C_REQ_CHANNEL_REGISTER::~P_C_REQ_CHANNEL_REGISTER() {
  // @@protoc_insertion_point(destructor:neo.P_C_REQ_CHANNEL_REGISTER)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void P_C_REQ_CHANNEL_REGISTER::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_.Destroy();
}

void P_C_REQ_CHANNEL_REGISTER::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void P_C_REQ_CHANNEL_REGISTER::Clear() {
// @@protoc_insertion_point(message_clear_start:neo.P_C_REQ_CHANNEL_REGISTER)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_.ClearToEmpty();
  _impl_.channelid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* P_C_REQ_CHANNEL_REGISTER::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "neo.P_C_REQ_CHANNEL_REGISTER.user"));
        } else
          goto handle_unusual;
        continue;
      // int32 channelID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.channelid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* P_C_REQ_CHANNEL_REGISTER::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:neo.P_C_REQ_CHANNEL_REGISTER)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user = 1;
  if (!this->_internal_user().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user().data(), static_cast<int>(this->_internal_user().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "neo.P_C_REQ_CHANNEL_REGISTER.user");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user(), target);
  }

  // int32 channelID = 2;
  if (this->_internal_channelid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_channelid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:neo.P_C_REQ_CHANNEL_REGISTER)
  return target;
}

size_t P_C_REQ_CHANNEL_REGISTER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:neo.P_C_REQ_CHANNEL_REGISTER)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user = 1;
  if (!this->_internal_user().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user());
  }

  // int32 channelID = 2;
  if (this->_internal_channelid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_channelid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData P_C_REQ_CHANNEL_REGISTER::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    P_C_REQ_CHANNEL_REGISTER::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*P_C_REQ_CHANNEL_REGISTER::GetClassData() const { return &_class_data_; }


void P_C_REQ_CHANNEL_REGISTER::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<P_C_REQ_CHANNEL_REGISTER*>(&to_msg);
  auto& from = static_cast<const P_C_REQ_CHANNEL_REGISTER&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:neo.P_C_REQ_CHANNEL_REGISTER)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user().empty()) {
    _this->_internal_set_user(from._internal_user());
  }
  if (from._internal_channelid() != 0) {
    _this->_internal_set_channelid(from._internal_channelid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void P_C_REQ_CHANNEL_REGISTER::CopyFrom(const P_C_REQ_CHANNEL_REGISTER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:neo.P_C_REQ_CHANNEL_REGISTER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P_C_REQ_CHANNEL_REGISTER::IsInitialized() const {
  return true;
}

void P_C_REQ_CHANNEL_REGISTER::InternalSwap(P_C_REQ_CHANNEL_REGISTER* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_, lhs_arena,
      &other->_impl_.user_, rhs_arena
  );
  swap(_impl_.channelid_, other->_impl_.channelid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata P_C_REQ_CHANNEL_REGISTER::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_2eproto_getter, &descriptor_table_Packet_2eproto_once,
      file_level_metadata_Packet_2eproto[11]);
}

// ===================================================================

class P_S_RES_CHANNEL_REGISTER::_Internal {
 public:
};

P_S_RES_CHANNEL_REGISTER::P_S_RES_CHANNEL_REGISTER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:neo.P_S_RES_CHANNEL_REGISTER)
}
P_S_RES_CHANNEL_REGISTER::P_S_RES_CHANNEL_REGISTER(const P_S_RES_CHANNEL_REGISTER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  P_S_RES_CHANNEL_REGISTER* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){}
    , decltype(_impl_.result_){}
    , decltype(_impl_.channelid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    _this->_impl_.msg_.Set(from._internal_msg(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.result_, &from._impl_.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.channelid_) -
    reinterpret_cast<char*>(&_impl_.result_)) + sizeof(_impl_.channelid_));
  // @@protoc_insertion_point(copy_constructor:neo.P_S_RES_CHANNEL_REGISTER)
}

inline void P_S_RES_CHANNEL_REGISTER::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){}
    , decltype(_impl_.result_){0}
    , decltype(_impl_.channelid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

P_S_RES_CHANNEL_REGISTER::~P_S_RES_CHANNEL_REGISTER() {
  // @@protoc_insertion_point(destructor:neo.P_S_RES_CHANNEL_REGISTER)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void P_S_RES_CHANNEL_REGISTER::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msg_.Destroy();
}

void P_S_RES_CHANNEL_REGISTER::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void P_S_RES_CHANNEL_REGISTER::Clear() {
// @@protoc_insertion_point(message_clear_start:neo.P_S_RES_CHANNEL_REGISTER)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.msg_.ClearToEmpty();
  ::memset(&_impl_.result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.channelid_) -
      reinterpret_cast<char*>(&_impl_.result_)) + sizeof(_impl_.channelid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* P_S_RES_CHANNEL_REGISTER::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .neo.PacketResult result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::neo::PacketResult>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 channelID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.channelid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "neo.P_S_RES_CHANNEL_REGISTER.msg"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* P_S_RES_CHANNEL_REGISTER::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:neo.P_S_RES_CHANNEL_REGISTER)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .neo.PacketResult result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // int32 channelID = 2;
  if (this->_internal_channelid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_channelid(), target);
  }

  // string msg = 3;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "neo.P_S_RES_CHANNEL_REGISTER.msg");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:neo.P_S_RES_CHANNEL_REGISTER)
  return target;
}

size_t P_S_RES_CHANNEL_REGISTER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:neo.P_S_RES_CHANNEL_REGISTER)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 3;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // .neo.PacketResult result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
  }

  // int32 channelID = 2;
  if (this->_internal_channelid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_channelid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData P_S_RES_CHANNEL_REGISTER::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    P_S_RES_CHANNEL_REGISTER::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*P_S_RES_CHANNEL_REGISTER::GetClassData() const { return &_class_data_; }


void P_S_RES_CHANNEL_REGISTER::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<P_S_RES_CHANNEL_REGISTER*>(&to_msg);
  auto& from = static_cast<const P_S_RES_CHANNEL_REGISTER&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:neo.P_S_RES_CHANNEL_REGISTER)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _this->_internal_set_msg(from._internal_msg());
  }
  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  if (from._internal_channelid() != 0) {
    _this->_internal_set_channelid(from._internal_channelid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void P_S_RES_CHANNEL_REGISTER::CopyFrom(const P_S_RES_CHANNEL_REGISTER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:neo.P_S_RES_CHANNEL_REGISTER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P_S_RES_CHANNEL_REGISTER::IsInitialized() const {
  return true;
}

void P_S_RES_CHANNEL_REGISTER::InternalSwap(P_S_RES_CHANNEL_REGISTER* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_, lhs_arena,
      &other->_impl_.msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(P_S_RES_CHANNEL_REGISTER, _impl_.channelid_)
      + sizeof(P_S_RES_CHANNEL_REGISTER::_impl_.channelid_)
      - PROTOBUF_FIELD_OFFSET(P_S_RES_CHANNEL_REGISTER, _impl_.result_)>(
          reinterpret_cast<char*>(&_impl_.result_),
          reinterpret_cast<char*>(&other->_impl_.result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata P_S_RES_CHANNEL_REGISTER::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_2eproto_getter, &descriptor_table_Packet_2eproto_once,
      file_level_metadata_Packet_2eproto[12]);
}

// ===================================================================

class P_C_NOTIFY_CHANNEL_UNREGISTER::_Internal {
 public:
};

P_C_NOTIFY_CHANNEL_UNREGISTER::P_C_NOTIFY_CHANNEL_UNREGISTER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:neo.P_C_NOTIFY_CHANNEL_UNREGISTER)
}
P_C_NOTIFY_CHANNEL_UNREGISTER::P_C_NOTIFY_CHANNEL_UNREGISTER(const P_C_NOTIFY_CHANNEL_UNREGISTER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  P_C_NOTIFY_CHANNEL_UNREGISTER* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){}
    , decltype(_impl_.result_){}
    , decltype(_impl_.channelid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    _this->_impl_.msg_.Set(from._internal_msg(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.result_, &from._impl_.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.channelid_) -
    reinterpret_cast<char*>(&_impl_.result_)) + sizeof(_impl_.channelid_));
  // @@protoc_insertion_point(copy_constructor:neo.P_C_NOTIFY_CHANNEL_UNREGISTER)
}

inline void P_C_NOTIFY_CHANNEL_UNREGISTER::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){}
    , decltype(_impl_.result_){0}
    , decltype(_impl_.channelid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

P_C_NOTIFY_CHANNEL_UNREGISTER::~P_C_NOTIFY_CHANNEL_UNREGISTER() {
  // @@protoc_insertion_point(destructor:neo.P_C_NOTIFY_CHANNEL_UNREGISTER)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void P_C_NOTIFY_CHANNEL_UNREGISTER::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msg_.Destroy();
}

void P_C_NOTIFY_CHANNEL_UNREGISTER::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void P_C_NOTIFY_CHANNEL_UNREGISTER::Clear() {
// @@protoc_insertion_point(message_clear_start:neo.P_C_NOTIFY_CHANNEL_UNREGISTER)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.msg_.ClearToEmpty();
  ::memset(&_impl_.result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.channelid_) -
      reinterpret_cast<char*>(&_impl_.result_)) + sizeof(_impl_.channelid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* P_C_NOTIFY_CHANNEL_UNREGISTER::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 channelID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.channelid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "neo.P_C_NOTIFY_CHANNEL_UNREGISTER.msg"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* P_C_NOTIFY_CHANNEL_UNREGISTER::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:neo.P_C_NOTIFY_CHANNEL_UNREGISTER)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  // int32 channelID = 2;
  if (this->_internal_channelid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_channelid(), target);
  }

  // string msg = 3;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "neo.P_C_NOTIFY_CHANNEL_UNREGISTER.msg");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:neo.P_C_NOTIFY_CHANNEL_UNREGISTER)
  return target;
}

size_t P_C_NOTIFY_CHANNEL_UNREGISTER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:neo.P_C_NOTIFY_CHANNEL_UNREGISTER)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 3;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // int32 result = 1;
  if (this->_internal_result() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_result());
  }

  // int32 channelID = 2;
  if (this->_internal_channelid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_channelid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData P_C_NOTIFY_CHANNEL_UNREGISTER::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    P_C_NOTIFY_CHANNEL_UNREGISTER::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*P_C_NOTIFY_CHANNEL_UNREGISTER::GetClassData() const { return &_class_data_; }


void P_C_NOTIFY_CHANNEL_UNREGISTER::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<P_C_NOTIFY_CHANNEL_UNREGISTER*>(&to_msg);
  auto& from = static_cast<const P_C_NOTIFY_CHANNEL_UNREGISTER&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:neo.P_C_NOTIFY_CHANNEL_UNREGISTER)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _this->_internal_set_msg(from._internal_msg());
  }
  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  if (from._internal_channelid() != 0) {
    _this->_internal_set_channelid(from._internal_channelid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void P_C_NOTIFY_CHANNEL_UNREGISTER::CopyFrom(const P_C_NOTIFY_CHANNEL_UNREGISTER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:neo.P_C_NOTIFY_CHANNEL_UNREGISTER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P_C_NOTIFY_CHANNEL_UNREGISTER::IsInitialized() const {
  return true;
}

void P_C_NOTIFY_CHANNEL_UNREGISTER::InternalSwap(P_C_NOTIFY_CHANNEL_UNREGISTER* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_, lhs_arena,
      &other->_impl_.msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(P_C_NOTIFY_CHANNEL_UNREGISTER, _impl_.channelid_)
      + sizeof(P_C_NOTIFY_CHANNEL_UNREGISTER::_impl_.channelid_)
      - PROTOBUF_FIELD_OFFSET(P_C_NOTIFY_CHANNEL_UNREGISTER, _impl_.result_)>(
          reinterpret_cast<char*>(&_impl_.result_),
          reinterpret_cast<char*>(&other->_impl_.result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata P_C_NOTIFY_CHANNEL_UNREGISTER::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_2eproto_getter, &descriptor_table_Packet_2eproto_once,
      file_level_metadata_Packet_2eproto[13]);
}

// ===================================================================

class P_C_NOTIFY_MAP_REGISTER::_Internal {
 public:
};

P_C_NOTIFY_MAP_REGISTER::P_C_NOTIFY_MAP_REGISTER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:neo.P_C_NOTIFY_MAP_REGISTER)
}
P_C_NOTIFY_MAP_REGISTER::P_C_NOTIFY_MAP_REGISTER(const P_C_NOTIFY_MAP_REGISTER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  P_C_NOTIFY_MAP_REGISTER* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.mapcount_){}
    , decltype(_impl_.isregister_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.mapcount_, &from._impl_.mapcount_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.isregister_) -
    reinterpret_cast<char*>(&_impl_.mapcount_)) + sizeof(_impl_.isregister_));
  // @@protoc_insertion_point(copy_constructor:neo.P_C_NOTIFY_MAP_REGISTER)
}

inline void P_C_NOTIFY_MAP_REGISTER::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.mapcount_){0}
    , decltype(_impl_.isregister_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

P_C_NOTIFY_MAP_REGISTER::~P_C_NOTIFY_MAP_REGISTER() {
  // @@protoc_insertion_point(destructor:neo.P_C_NOTIFY_MAP_REGISTER)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void P_C_NOTIFY_MAP_REGISTER::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void P_C_NOTIFY_MAP_REGISTER::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void P_C_NOTIFY_MAP_REGISTER::Clear() {
// @@protoc_insertion_point(message_clear_start:neo.P_C_NOTIFY_MAP_REGISTER)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.mapcount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.isregister_) -
      reinterpret_cast<char*>(&_impl_.mapcount_)) + sizeof(_impl_.isregister_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* P_C_NOTIFY_MAP_REGISTER::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 mapCount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.mapcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isRegister = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.isregister_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "neo.P_C_NOTIFY_MAP_REGISTER.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* P_C_NOTIFY_MAP_REGISTER::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:neo.P_C_NOTIFY_MAP_REGISTER)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mapCount = 1;
  if (this->_internal_mapcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_mapcount(), target);
  }

  // bool isRegister = 2;
  if (this->_internal_isregister() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_isregister(), target);
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "neo.P_C_NOTIFY_MAP_REGISTER.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:neo.P_C_NOTIFY_MAP_REGISTER)
  return target;
}

size_t P_C_NOTIFY_MAP_REGISTER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:neo.P_C_NOTIFY_MAP_REGISTER)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 3;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 mapCount = 1;
  if (this->_internal_mapcount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mapcount());
  }

  // bool isRegister = 2;
  if (this->_internal_isregister() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData P_C_NOTIFY_MAP_REGISTER::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    P_C_NOTIFY_MAP_REGISTER::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*P_C_NOTIFY_MAP_REGISTER::GetClassData() const { return &_class_data_; }


void P_C_NOTIFY_MAP_REGISTER::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<P_C_NOTIFY_MAP_REGISTER*>(&to_msg);
  auto& from = static_cast<const P_C_NOTIFY_MAP_REGISTER&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:neo.P_C_NOTIFY_MAP_REGISTER)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_mapcount() != 0) {
    _this->_internal_set_mapcount(from._internal_mapcount());
  }
  if (from._internal_isregister() != 0) {
    _this->_internal_set_isregister(from._internal_isregister());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void P_C_NOTIFY_MAP_REGISTER::CopyFrom(const P_C_NOTIFY_MAP_REGISTER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:neo.P_C_NOTIFY_MAP_REGISTER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P_C_NOTIFY_MAP_REGISTER::IsInitialized() const {
  return true;
}

void P_C_NOTIFY_MAP_REGISTER::InternalSwap(P_C_NOTIFY_MAP_REGISTER* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(P_C_NOTIFY_MAP_REGISTER, _impl_.isregister_)
      + sizeof(P_C_NOTIFY_MAP_REGISTER::_impl_.isregister_)
      - PROTOBUF_FIELD_OFFSET(P_C_NOTIFY_MAP_REGISTER, _impl_.mapcount_)>(
          reinterpret_cast<char*>(&_impl_.mapcount_),
          reinterpret_cast<char*>(&other->_impl_.mapcount_));
}

::PROTOBUF_NAMESPACE_ID::Metadata P_C_NOTIFY_MAP_REGISTER::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_2eproto_getter, &descriptor_table_Packet_2eproto_once,
      file_level_metadata_Packet_2eproto[14]);
}

// ===================================================================

class P_C_REQ_CHARACTER_REGISTER::_Internal {
 public:
};

P_C_REQ_CHARACTER_REGISTER::P_C_REQ_CHARACTER_REGISTER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:neo.P_C_REQ_CHARACTER_REGISTER)
}
P_C_REQ_CHARACTER_REGISTER::P_C_REQ_CHARACTER_REGISTER(const P_C_REQ_CHARACTER_REGISTER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  P_C_REQ_CHARACTER_REGISTER* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.mapid_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.mapid_, &from._impl_.mapid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.z_) -
    reinterpret_cast<char*>(&_impl_.mapid_)) + sizeof(_impl_.z_));
  // @@protoc_insertion_point(copy_constructor:neo.P_C_REQ_CHARACTER_REGISTER)
}

inline void P_C_REQ_CHARACTER_REGISTER::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.mapid_){0}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

P_C_REQ_CHARACTER_REGISTER::~P_C_REQ_CHARACTER_REGISTER() {
  // @@protoc_insertion_point(destructor:neo.P_C_REQ_CHARACTER_REGISTER)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void P_C_REQ_CHARACTER_REGISTER::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void P_C_REQ_CHARACTER_REGISTER::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void P_C_REQ_CHARACTER_REGISTER::Clear() {
// @@protoc_insertion_point(message_clear_start:neo.P_C_REQ_CHARACTER_REGISTER)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.mapid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.z_) -
      reinterpret_cast<char*>(&_impl_.mapid_)) + sizeof(_impl_.z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* P_C_REQ_CHARACTER_REGISTER::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "neo.P_C_REQ_CHARACTER_REGISTER.name"));
        } else
          goto handle_unusual;
        continue;
      // int32 mapID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.mapid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float z = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* P_C_REQ_CHARACTER_REGISTER::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:neo.P_C_REQ_CHARACTER_REGISTER)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "neo.P_C_REQ_CHARACTER_REGISTER.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 mapID = 2;
  if (this->_internal_mapid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_mapid(), target);
  }

  // float x = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_x(), target);
  }

  // float y = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_y(), target);
  }

  // float z = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:neo.P_C_REQ_CHARACTER_REGISTER)
  return target;
}

size_t P_C_REQ_CHARACTER_REGISTER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:neo.P_C_REQ_CHARACTER_REGISTER)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 mapID = 2;
  if (this->_internal_mapid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mapid());
  }

  // float x = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float z = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData P_C_REQ_CHARACTER_REGISTER::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    P_C_REQ_CHARACTER_REGISTER::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*P_C_REQ_CHARACTER_REGISTER::GetClassData() const { return &_class_data_; }


void P_C_REQ_CHARACTER_REGISTER::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<P_C_REQ_CHARACTER_REGISTER*>(&to_msg);
  auto& from = static_cast<const P_C_REQ_CHARACTER_REGISTER&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:neo.P_C_REQ_CHARACTER_REGISTER)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_mapid() != 0) {
    _this->_internal_set_mapid(from._internal_mapid());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void P_C_REQ_CHARACTER_REGISTER::CopyFrom(const P_C_REQ_CHARACTER_REGISTER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:neo.P_C_REQ_CHARACTER_REGISTER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P_C_REQ_CHARACTER_REGISTER::IsInitialized() const {
  return true;
}

void P_C_REQ_CHARACTER_REGISTER::InternalSwap(P_C_REQ_CHARACTER_REGISTER* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(P_C_REQ_CHARACTER_REGISTER, _impl_.z_)
      + sizeof(P_C_REQ_CHARACTER_REGISTER::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(P_C_REQ_CHARACTER_REGISTER, _impl_.mapid_)>(
          reinterpret_cast<char*>(&_impl_.mapid_),
          reinterpret_cast<char*>(&other->_impl_.mapid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata P_C_REQ_CHARACTER_REGISTER::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_2eproto_getter, &descriptor_table_Packet_2eproto_once,
      file_level_metadata_Packet_2eproto[15]);
}

// ===================================================================

class P_S_RES_CHARACTER_REGISTER::_Internal {
 public:
};

P_S_RES_CHARACTER_REGISTER::P_S_RES_CHARACTER_REGISTER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:neo.P_S_RES_CHARACTER_REGISTER)
}
P_S_RES_CHARACTER_REGISTER::P_S_RES_CHARACTER_REGISTER(const P_S_RES_CHARACTER_REGISTER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  P_S_RES_CHARACTER_REGISTER* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.objects_){from._impl_.objects_}
    , decltype(_impl_.msg_){}
    , decltype(_impl_.result_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    _this->_impl_.msg_.Set(from._internal_msg(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.result_ = from._impl_.result_;
  // @@protoc_insertion_point(copy_constructor:neo.P_S_RES_CHARACTER_REGISTER)
}

inline void P_S_RES_CHARACTER_REGISTER::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.objects_){arena}
    , decltype(_impl_.msg_){}
    , decltype(_impl_.result_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

P_S_RES_CHARACTER_REGISTER::~P_S_RES_CHARACTER_REGISTER() {
  // @@protoc_insertion_point(destructor:neo.P_S_RES_CHARACTER_REGISTER)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void P_S_RES_CHARACTER_REGISTER::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.objects_.~RepeatedPtrField();
  _impl_.msg_.Destroy();
}

void P_S_RES_CHARACTER_REGISTER::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void P_S_RES_CHARACTER_REGISTER::Clear() {
// @@protoc_insertion_point(message_clear_start:neo.P_S_RES_CHARACTER_REGISTER)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.objects_.Clear();
  _impl_.msg_.ClearToEmpty();
  _impl_.result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* P_S_RES_CHARACTER_REGISTER::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "neo.P_S_RES_CHARACTER_REGISTER.msg"));
        } else
          goto handle_unusual;
        continue;
      // repeated .neo.GAME_OBJECT objects = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_objects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* P_S_RES_CHARACTER_REGISTER::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:neo.P_S_RES_CHARACTER_REGISTER)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "neo.P_S_RES_CHARACTER_REGISTER.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  // repeated .neo.GAME_OBJECT objects = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_objects_size()); i < n; i++) {
    const auto& repfield = this->_internal_objects(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:neo.P_S_RES_CHARACTER_REGISTER)
  return target;
}

size_t P_S_RES_CHARACTER_REGISTER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:neo.P_S_RES_CHARACTER_REGISTER)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .neo.GAME_OBJECT objects = 3;
  total_size += 1UL * this->_internal_objects_size();
  for (const auto& msg : this->_impl_.objects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // int32 result = 1;
  if (this->_internal_result() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData P_S_RES_CHARACTER_REGISTER::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    P_S_RES_CHARACTER_REGISTER::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*P_S_RES_CHARACTER_REGISTER::GetClassData() const { return &_class_data_; }


void P_S_RES_CHARACTER_REGISTER::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<P_S_RES_CHARACTER_REGISTER*>(&to_msg);
  auto& from = static_cast<const P_S_RES_CHARACTER_REGISTER&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:neo.P_S_RES_CHARACTER_REGISTER)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.objects_.MergeFrom(from._impl_.objects_);
  if (!from._internal_msg().empty()) {
    _this->_internal_set_msg(from._internal_msg());
  }
  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void P_S_RES_CHARACTER_REGISTER::CopyFrom(const P_S_RES_CHARACTER_REGISTER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:neo.P_S_RES_CHARACTER_REGISTER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P_S_RES_CHARACTER_REGISTER::IsInitialized() const {
  return true;
}

void P_S_RES_CHARACTER_REGISTER::InternalSwap(P_S_RES_CHARACTER_REGISTER* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.objects_.InternalSwap(&other->_impl_.objects_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_, lhs_arena,
      &other->_impl_.msg_, rhs_arena
  );
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata P_S_RES_CHARACTER_REGISTER::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_2eproto_getter, &descriptor_table_Packet_2eproto_once,
      file_level_metadata_Packet_2eproto[16]);
}

// ===================================================================

class P_C_REQ_CHARACTER_MAP_UNREGISTER::_Internal {
 public:
};

P_C_REQ_CHARACTER_MAP_UNREGISTER::P_C_REQ_CHARACTER_MAP_UNREGISTER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:neo.P_C_REQ_CHARACTER_MAP_UNREGISTER)
}
P_C_REQ_CHARACTER_MAP_UNREGISTER::P_C_REQ_CHARACTER_MAP_UNREGISTER(const P_C_REQ_CHARACTER_MAP_UNREGISTER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  P_C_REQ_CHARACTER_MAP_UNREGISTER* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.mapid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.mapid_ = from._impl_.mapid_;
  // @@protoc_insertion_point(copy_constructor:neo.P_C_REQ_CHARACTER_MAP_UNREGISTER)
}

inline void P_C_REQ_CHARACTER_MAP_UNREGISTER::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.mapid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

P_C_REQ_CHARACTER_MAP_UNREGISTER::~P_C_REQ_CHARACTER_MAP_UNREGISTER() {
  // @@protoc_insertion_point(destructor:neo.P_C_REQ_CHARACTER_MAP_UNREGISTER)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void P_C_REQ_CHARACTER_MAP_UNREGISTER::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void P_C_REQ_CHARACTER_MAP_UNREGISTER::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void P_C_REQ_CHARACTER_MAP_UNREGISTER::Clear() {
// @@protoc_insertion_point(message_clear_start:neo.P_C_REQ_CHARACTER_MAP_UNREGISTER)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.mapid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* P_C_REQ_CHARACTER_MAP_UNREGISTER::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 mapID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.mapid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "neo.P_C_REQ_CHARACTER_MAP_UNREGISTER.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* P_C_REQ_CHARACTER_MAP_UNREGISTER::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:neo.P_C_REQ_CHARACTER_MAP_UNREGISTER)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mapID = 1;
  if (this->_internal_mapid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_mapid(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "neo.P_C_REQ_CHARACTER_MAP_UNREGISTER.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:neo.P_C_REQ_CHARACTER_MAP_UNREGISTER)
  return target;
}

size_t P_C_REQ_CHARACTER_MAP_UNREGISTER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:neo.P_C_REQ_CHARACTER_MAP_UNREGISTER)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 mapID = 1;
  if (this->_internal_mapid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mapid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData P_C_REQ_CHARACTER_MAP_UNREGISTER::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    P_C_REQ_CHARACTER_MAP_UNREGISTER::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*P_C_REQ_CHARACTER_MAP_UNREGISTER::GetClassData() const { return &_class_data_; }


void P_C_REQ_CHARACTER_MAP_UNREGISTER::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<P_C_REQ_CHARACTER_MAP_UNREGISTER*>(&to_msg);
  auto& from = static_cast<const P_C_REQ_CHARACTER_MAP_UNREGISTER&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:neo.P_C_REQ_CHARACTER_MAP_UNREGISTER)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_mapid() != 0) {
    _this->_internal_set_mapid(from._internal_mapid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void P_C_REQ_CHARACTER_MAP_UNREGISTER::CopyFrom(const P_C_REQ_CHARACTER_MAP_UNREGISTER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:neo.P_C_REQ_CHARACTER_MAP_UNREGISTER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P_C_REQ_CHARACTER_MAP_UNREGISTER::IsInitialized() const {
  return true;
}

void P_C_REQ_CHARACTER_MAP_UNREGISTER::InternalSwap(P_C_REQ_CHARACTER_MAP_UNREGISTER* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.mapid_, other->_impl_.mapid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata P_C_REQ_CHARACTER_MAP_UNREGISTER::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_2eproto_getter, &descriptor_table_Packet_2eproto_once,
      file_level_metadata_Packet_2eproto[17]);
}

// ===================================================================

class P_S_NOTIFY_CHARACTER_MAP_UNREGISTER::_Internal {
 public:
};

P_S_NOTIFY_CHARACTER_MAP_UNREGISTER::P_S_NOTIFY_CHARACTER_MAP_UNREGISTER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:neo.P_S_NOTIFY_CHARACTER_MAP_UNREGISTER)
}
P_S_NOTIFY_CHARACTER_MAP_UNREGISTER::P_S_NOTIFY_CHARACTER_MAP_UNREGISTER(const P_S_NOTIFY_CHARACTER_MAP_UNREGISTER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  P_S_NOTIFY_CHARACTER_MAP_UNREGISTER* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.mapid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.mapid_ = from._impl_.mapid_;
  // @@protoc_insertion_point(copy_constructor:neo.P_S_NOTIFY_CHARACTER_MAP_UNREGISTER)
}

inline void P_S_NOTIFY_CHARACTER_MAP_UNREGISTER::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.mapid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

P_S_NOTIFY_CHARACTER_MAP_UNREGISTER::~P_S_NOTIFY_CHARACTER_MAP_UNREGISTER() {
  // @@protoc_insertion_point(destructor:neo.P_S_NOTIFY_CHARACTER_MAP_UNREGISTER)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void P_S_NOTIFY_CHARACTER_MAP_UNREGISTER::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void P_S_NOTIFY_CHARACTER_MAP_UNREGISTER::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void P_S_NOTIFY_CHARACTER_MAP_UNREGISTER::Clear() {
// @@protoc_insertion_point(message_clear_start:neo.P_S_NOTIFY_CHARACTER_MAP_UNREGISTER)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.mapid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* P_S_NOTIFY_CHARACTER_MAP_UNREGISTER::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 mapID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.mapid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "neo.P_S_NOTIFY_CHARACTER_MAP_UNREGISTER.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* P_S_NOTIFY_CHARACTER_MAP_UNREGISTER::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:neo.P_S_NOTIFY_CHARACTER_MAP_UNREGISTER)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mapID = 1;
  if (this->_internal_mapid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_mapid(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "neo.P_S_NOTIFY_CHARACTER_MAP_UNREGISTER.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:neo.P_S_NOTIFY_CHARACTER_MAP_UNREGISTER)
  return target;
}

size_t P_S_NOTIFY_CHARACTER_MAP_UNREGISTER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:neo.P_S_NOTIFY_CHARACTER_MAP_UNREGISTER)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 mapID = 1;
  if (this->_internal_mapid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mapid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData P_S_NOTIFY_CHARACTER_MAP_UNREGISTER::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    P_S_NOTIFY_CHARACTER_MAP_UNREGISTER::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*P_S_NOTIFY_CHARACTER_MAP_UNREGISTER::GetClassData() const { return &_class_data_; }


void P_S_NOTIFY_CHARACTER_MAP_UNREGISTER::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<P_S_NOTIFY_CHARACTER_MAP_UNREGISTER*>(&to_msg);
  auto& from = static_cast<const P_S_NOTIFY_CHARACTER_MAP_UNREGISTER&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:neo.P_S_NOTIFY_CHARACTER_MAP_UNREGISTER)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_mapid() != 0) {
    _this->_internal_set_mapid(from._internal_mapid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void P_S_NOTIFY_CHARACTER_MAP_UNREGISTER::CopyFrom(const P_S_NOTIFY_CHARACTER_MAP_UNREGISTER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:neo.P_S_NOTIFY_CHARACTER_MAP_UNREGISTER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P_S_NOTIFY_CHARACTER_MAP_UNREGISTER::IsInitialized() const {
  return true;
}

void P_S_NOTIFY_CHARACTER_MAP_UNREGISTER::InternalSwap(P_S_NOTIFY_CHARACTER_MAP_UNREGISTER* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.mapid_, other->_impl_.mapid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata P_S_NOTIFY_CHARACTER_MAP_UNREGISTER::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_2eproto_getter, &descriptor_table_Packet_2eproto_once,
      file_level_metadata_Packet_2eproto[18]);
}

// ===================================================================

class P_S_NOTIFY_MONSTER_MAP_REGISTER::_Internal {
 public:
};

P_S_NOTIFY_MONSTER_MAP_REGISTER::P_S_NOTIFY_MONSTER_MAP_REGISTER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:neo.P_S_NOTIFY_MONSTER_MAP_REGISTER)
}
P_S_NOTIFY_MONSTER_MAP_REGISTER::P_S_NOTIFY_MONSTER_MAP_REGISTER(const P_S_NOTIFY_MONSTER_MAP_REGISTER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  P_S_NOTIFY_MONSTER_MAP_REGISTER* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.mapid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.mapid_ = from._impl_.mapid_;
  // @@protoc_insertion_point(copy_constructor:neo.P_S_NOTIFY_MONSTER_MAP_REGISTER)
}

inline void P_S_NOTIFY_MONSTER_MAP_REGISTER::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.mapid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

P_S_NOTIFY_MONSTER_MAP_REGISTER::~P_S_NOTIFY_MONSTER_MAP_REGISTER() {
  // @@protoc_insertion_point(destructor:neo.P_S_NOTIFY_MONSTER_MAP_REGISTER)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void P_S_NOTIFY_MONSTER_MAP_REGISTER::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void P_S_NOTIFY_MONSTER_MAP_REGISTER::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void P_S_NOTIFY_MONSTER_MAP_REGISTER::Clear() {
// @@protoc_insertion_point(message_clear_start:neo.P_S_NOTIFY_MONSTER_MAP_REGISTER)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.mapid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* P_S_NOTIFY_MONSTER_MAP_REGISTER::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 mapID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.mapid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "neo.P_S_NOTIFY_MONSTER_MAP_REGISTER.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* P_S_NOTIFY_MONSTER_MAP_REGISTER::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:neo.P_S_NOTIFY_MONSTER_MAP_REGISTER)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mapID = 1;
  if (this->_internal_mapid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_mapid(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "neo.P_S_NOTIFY_MONSTER_MAP_REGISTER.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:neo.P_S_NOTIFY_MONSTER_MAP_REGISTER)
  return target;
}

size_t P_S_NOTIFY_MONSTER_MAP_REGISTER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:neo.P_S_NOTIFY_MONSTER_MAP_REGISTER)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 mapID = 1;
  if (this->_internal_mapid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mapid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData P_S_NOTIFY_MONSTER_MAP_REGISTER::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    P_S_NOTIFY_MONSTER_MAP_REGISTER::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*P_S_NOTIFY_MONSTER_MAP_REGISTER::GetClassData() const { return &_class_data_; }


void P_S_NOTIFY_MONSTER_MAP_REGISTER::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<P_S_NOTIFY_MONSTER_MAP_REGISTER*>(&to_msg);
  auto& from = static_cast<const P_S_NOTIFY_MONSTER_MAP_REGISTER&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:neo.P_S_NOTIFY_MONSTER_MAP_REGISTER)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_mapid() != 0) {
    _this->_internal_set_mapid(from._internal_mapid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void P_S_NOTIFY_MONSTER_MAP_REGISTER::CopyFrom(const P_S_NOTIFY_MONSTER_MAP_REGISTER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:neo.P_S_NOTIFY_MONSTER_MAP_REGISTER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P_S_NOTIFY_MONSTER_MAP_REGISTER::IsInitialized() const {
  return true;
}

void P_S_NOTIFY_MONSTER_MAP_REGISTER::InternalSwap(P_S_NOTIFY_MONSTER_MAP_REGISTER* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.mapid_, other->_impl_.mapid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata P_S_NOTIFY_MONSTER_MAP_REGISTER::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_2eproto_getter, &descriptor_table_Packet_2eproto_once,
      file_level_metadata_Packet_2eproto[19]);
}

// ===================================================================

class P_S_NOTIFY_MONSTER_MAP_UNREGISTER::_Internal {
 public:
};

P_S_NOTIFY_MONSTER_MAP_UNREGISTER::P_S_NOTIFY_MONSTER_MAP_UNREGISTER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:neo.P_S_NOTIFY_MONSTER_MAP_UNREGISTER)
}
P_S_NOTIFY_MONSTER_MAP_UNREGISTER::P_S_NOTIFY_MONSTER_MAP_UNREGISTER(const P_S_NOTIFY_MONSTER_MAP_UNREGISTER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  P_S_NOTIFY_MONSTER_MAP_UNREGISTER* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.mapid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.mapid_ = from._impl_.mapid_;
  // @@protoc_insertion_point(copy_constructor:neo.P_S_NOTIFY_MONSTER_MAP_UNREGISTER)
}

inline void P_S_NOTIFY_MONSTER_MAP_UNREGISTER::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.mapid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

P_S_NOTIFY_MONSTER_MAP_UNREGISTER::~P_S_NOTIFY_MONSTER_MAP_UNREGISTER() {
  // @@protoc_insertion_point(destructor:neo.P_S_NOTIFY_MONSTER_MAP_UNREGISTER)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void P_S_NOTIFY_MONSTER_MAP_UNREGISTER::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void P_S_NOTIFY_MONSTER_MAP_UNREGISTER::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void P_S_NOTIFY_MONSTER_MAP_UNREGISTER::Clear() {
// @@protoc_insertion_point(message_clear_start:neo.P_S_NOTIFY_MONSTER_MAP_UNREGISTER)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.mapid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* P_S_NOTIFY_MONSTER_MAP_UNREGISTER::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 mapID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.mapid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "neo.P_S_NOTIFY_MONSTER_MAP_UNREGISTER.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* P_S_NOTIFY_MONSTER_MAP_UNREGISTER::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:neo.P_S_NOTIFY_MONSTER_MAP_UNREGISTER)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mapID = 1;
  if (this->_internal_mapid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_mapid(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "neo.P_S_NOTIFY_MONSTER_MAP_UNREGISTER.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:neo.P_S_NOTIFY_MONSTER_MAP_UNREGISTER)
  return target;
}

size_t P_S_NOTIFY_MONSTER_MAP_UNREGISTER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:neo.P_S_NOTIFY_MONSTER_MAP_UNREGISTER)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 mapID = 1;
  if (this->_internal_mapid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mapid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData P_S_NOTIFY_MONSTER_MAP_UNREGISTER::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    P_S_NOTIFY_MONSTER_MAP_UNREGISTER::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*P_S_NOTIFY_MONSTER_MAP_UNREGISTER::GetClassData() const { return &_class_data_; }


void P_S_NOTIFY_MONSTER_MAP_UNREGISTER::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<P_S_NOTIFY_MONSTER_MAP_UNREGISTER*>(&to_msg);
  auto& from = static_cast<const P_S_NOTIFY_MONSTER_MAP_UNREGISTER&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:neo.P_S_NOTIFY_MONSTER_MAP_UNREGISTER)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_mapid() != 0) {
    _this->_internal_set_mapid(from._internal_mapid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void P_S_NOTIFY_MONSTER_MAP_UNREGISTER::CopyFrom(const P_S_NOTIFY_MONSTER_MAP_UNREGISTER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:neo.P_S_NOTIFY_MONSTER_MAP_UNREGISTER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P_S_NOTIFY_MONSTER_MAP_UNREGISTER::IsInitialized() const {
  return true;
}

void P_S_NOTIFY_MONSTER_MAP_UNREGISTER::InternalSwap(P_S_NOTIFY_MONSTER_MAP_UNREGISTER* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.mapid_, other->_impl_.mapid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata P_S_NOTIFY_MONSTER_MAP_UNREGISTER::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_2eproto_getter, &descriptor_table_Packet_2eproto_once,
      file_level_metadata_Packet_2eproto[20]);
}

// ===================================================================

class P_S_NOTIFY_ATTACK_ANI_EVENT::_Internal {
 public:
};

P_S_NOTIFY_ATTACK_ANI_EVENT::P_S_NOTIFY_ATTACK_ANI_EVENT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:neo.P_S_NOTIFY_ATTACK_ANI_EVENT)
}
P_S_NOTIFY_ATTACK_ANI_EVENT::P_S_NOTIFY_ATTACK_ANI_EVENT(const P_S_NOTIFY_ATTACK_ANI_EVENT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  P_S_NOTIFY_ATTACK_ANI_EVENT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){}
    , decltype(_impl_.mapid_){}
    , decltype(_impl_.dir_){}
    , decltype(_impl_.animationcount_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.player_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_player().empty()) {
    _this->_impl_.player_.Set(from._internal_player(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.mapid_, &from._impl_.mapid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.animationcount_) -
    reinterpret_cast<char*>(&_impl_.mapid_)) + sizeof(_impl_.animationcount_));
  // @@protoc_insertion_point(copy_constructor:neo.P_S_NOTIFY_ATTACK_ANI_EVENT)
}

inline void P_S_NOTIFY_ATTACK_ANI_EVENT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){}
    , decltype(_impl_.mapid_){0}
    , decltype(_impl_.dir_){0}
    , decltype(_impl_.animationcount_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.player_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

P_S_NOTIFY_ATTACK_ANI_EVENT::~P_S_NOTIFY_ATTACK_ANI_EVENT() {
  // @@protoc_insertion_point(destructor:neo.P_S_NOTIFY_ATTACK_ANI_EVENT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void P_S_NOTIFY_ATTACK_ANI_EVENT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.player_.Destroy();
}

void P_S_NOTIFY_ATTACK_ANI_EVENT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void P_S_NOTIFY_ATTACK_ANI_EVENT::Clear() {
// @@protoc_insertion_point(message_clear_start:neo.P_S_NOTIFY_ATTACK_ANI_EVENT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_.ClearToEmpty();
  ::memset(&_impl_.mapid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.animationcount_) -
      reinterpret_cast<char*>(&_impl_.mapid_)) + sizeof(_impl_.animationcount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* P_S_NOTIFY_ATTACK_ANI_EVENT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 mapID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.mapid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 dir = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.dir_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 animationCount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.animationcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string player = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_player();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "neo.P_S_NOTIFY_ATTACK_ANI_EVENT.player"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* P_S_NOTIFY_ATTACK_ANI_EVENT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:neo.P_S_NOTIFY_ATTACK_ANI_EVENT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mapID = 1;
  if (this->_internal_mapid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_mapid(), target);
  }

  // int32 dir = 2;
  if (this->_internal_dir() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_dir(), target);
  }

  // int32 animationCount = 3;
  if (this->_internal_animationcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_animationcount(), target);
  }

  // string player = 4;
  if (!this->_internal_player().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_player().data(), static_cast<int>(this->_internal_player().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "neo.P_S_NOTIFY_ATTACK_ANI_EVENT.player");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_player(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:neo.P_S_NOTIFY_ATTACK_ANI_EVENT)
  return target;
}

size_t P_S_NOTIFY_ATTACK_ANI_EVENT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:neo.P_S_NOTIFY_ATTACK_ANI_EVENT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string player = 4;
  if (!this->_internal_player().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_player());
  }

  // int32 mapID = 1;
  if (this->_internal_mapid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mapid());
  }

  // int32 dir = 2;
  if (this->_internal_dir() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_dir());
  }

  // int32 animationCount = 3;
  if (this->_internal_animationcount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_animationcount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData P_S_NOTIFY_ATTACK_ANI_EVENT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    P_S_NOTIFY_ATTACK_ANI_EVENT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*P_S_NOTIFY_ATTACK_ANI_EVENT::GetClassData() const { return &_class_data_; }


void P_S_NOTIFY_ATTACK_ANI_EVENT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<P_S_NOTIFY_ATTACK_ANI_EVENT*>(&to_msg);
  auto& from = static_cast<const P_S_NOTIFY_ATTACK_ANI_EVENT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:neo.P_S_NOTIFY_ATTACK_ANI_EVENT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_player().empty()) {
    _this->_internal_set_player(from._internal_player());
  }
  if (from._internal_mapid() != 0) {
    _this->_internal_set_mapid(from._internal_mapid());
  }
  if (from._internal_dir() != 0) {
    _this->_internal_set_dir(from._internal_dir());
  }
  if (from._internal_animationcount() != 0) {
    _this->_internal_set_animationcount(from._internal_animationcount());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void P_S_NOTIFY_ATTACK_ANI_EVENT::CopyFrom(const P_S_NOTIFY_ATTACK_ANI_EVENT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:neo.P_S_NOTIFY_ATTACK_ANI_EVENT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P_S_NOTIFY_ATTACK_ANI_EVENT::IsInitialized() const {
  return true;
}

void P_S_NOTIFY_ATTACK_ANI_EVENT::InternalSwap(P_S_NOTIFY_ATTACK_ANI_EVENT* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.player_, lhs_arena,
      &other->_impl_.player_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(P_S_NOTIFY_ATTACK_ANI_EVENT, _impl_.animationcount_)
      + sizeof(P_S_NOTIFY_ATTACK_ANI_EVENT::_impl_.animationcount_)
      - PROTOBUF_FIELD_OFFSET(P_S_NOTIFY_ATTACK_ANI_EVENT, _impl_.mapid_)>(
          reinterpret_cast<char*>(&_impl_.mapid_),
          reinterpret_cast<char*>(&other->_impl_.mapid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata P_S_NOTIFY_ATTACK_ANI_EVENT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_2eproto_getter, &descriptor_table_Packet_2eproto_once,
      file_level_metadata_Packet_2eproto[21]);
}

// ===================================================================

class P_S_NOTIFY_CHARACTER_INFO::_Internal {
 public:
};

P_S_NOTIFY_CHARACTER_INFO::P_S_NOTIFY_CHARACTER_INFO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:neo.P_S_NOTIFY_CHARACTER_INFO)
}
P_S_NOTIFY_CHARACTER_INFO::P_S_NOTIFY_CHARACTER_INFO(const P_S_NOTIFY_CHARACTER_INFO& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  P_S_NOTIFY_CHARACTER_INFO* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:neo.P_S_NOTIFY_CHARACTER_INFO)
}

inline void P_S_NOTIFY_CHARACTER_INFO::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

P_S_NOTIFY_CHARACTER_INFO::~P_S_NOTIFY_CHARACTER_INFO() {
  // @@protoc_insertion_point(destructor:neo.P_S_NOTIFY_CHARACTER_INFO)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void P_S_NOTIFY_CHARACTER_INFO::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void P_S_NOTIFY_CHARACTER_INFO::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void P_S_NOTIFY_CHARACTER_INFO::Clear() {
// @@protoc_insertion_point(message_clear_start:neo.P_S_NOTIFY_CHARACTER_INFO)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* P_S_NOTIFY_CHARACTER_INFO::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "neo.P_S_NOTIFY_CHARACTER_INFO.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* P_S_NOTIFY_CHARACTER_INFO::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:neo.P_S_NOTIFY_CHARACTER_INFO)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "neo.P_S_NOTIFY_CHARACTER_INFO.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:neo.P_S_NOTIFY_CHARACTER_INFO)
  return target;
}

size_t P_S_NOTIFY_CHARACTER_INFO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:neo.P_S_NOTIFY_CHARACTER_INFO)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData P_S_NOTIFY_CHARACTER_INFO::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    P_S_NOTIFY_CHARACTER_INFO::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*P_S_NOTIFY_CHARACTER_INFO::GetClassData() const { return &_class_data_; }


void P_S_NOTIFY_CHARACTER_INFO::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<P_S_NOTIFY_CHARACTER_INFO*>(&to_msg);
  auto& from = static_cast<const P_S_NOTIFY_CHARACTER_INFO&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:neo.P_S_NOTIFY_CHARACTER_INFO)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void P_S_NOTIFY_CHARACTER_INFO::CopyFrom(const P_S_NOTIFY_CHARACTER_INFO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:neo.P_S_NOTIFY_CHARACTER_INFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P_S_NOTIFY_CHARACTER_INFO::IsInitialized() const {
  return true;
}

void P_S_NOTIFY_CHARACTER_INFO::InternalSwap(P_S_NOTIFY_CHARACTER_INFO* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata P_S_NOTIFY_CHARACTER_INFO::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_2eproto_getter, &descriptor_table_Packet_2eproto_once,
      file_level_metadata_Packet_2eproto[22]);
}

// ===================================================================

class P_S_NOTIFY_MONSTER_INFO_MONSTER_DATA::_Internal {
 public:
};

P_S_NOTIFY_MONSTER_INFO_MONSTER_DATA::P_S_NOTIFY_MONSTER_INFO_MONSTER_DATA(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:neo.P_S_NOTIFY_MONSTER_INFO.MONSTER_DATA)
}
P_S_NOTIFY_MONSTER_INFO_MONSTER_DATA::P_S_NOTIFY_MONSTER_INFO_MONSTER_DATA(const P_S_NOTIFY_MONSTER_INFO_MONSTER_DATA& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  P_S_NOTIFY_MONSTER_INFO_MONSTER_DATA* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.pos_x_){}
    , decltype(_impl_.pos_y_){}
    , decltype(_impl_.hp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.pos_x_, &from._impl_.pos_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.hp_) -
    reinterpret_cast<char*>(&_impl_.pos_x_)) + sizeof(_impl_.hp_));
  // @@protoc_insertion_point(copy_constructor:neo.P_S_NOTIFY_MONSTER_INFO.MONSTER_DATA)
}

inline void P_S_NOTIFY_MONSTER_INFO_MONSTER_DATA::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.pos_x_){0}
    , decltype(_impl_.pos_y_){0}
    , decltype(_impl_.hp_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

P_S_NOTIFY_MONSTER_INFO_MONSTER_DATA::~P_S_NOTIFY_MONSTER_INFO_MONSTER_DATA() {
  // @@protoc_insertion_point(destructor:neo.P_S_NOTIFY_MONSTER_INFO.MONSTER_DATA)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void P_S_NOTIFY_MONSTER_INFO_MONSTER_DATA::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void P_S_NOTIFY_MONSTER_INFO_MONSTER_DATA::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void P_S_NOTIFY_MONSTER_INFO_MONSTER_DATA::Clear() {
// @@protoc_insertion_point(message_clear_start:neo.P_S_NOTIFY_MONSTER_INFO.MONSTER_DATA)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.pos_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.hp_) -
      reinterpret_cast<char*>(&_impl_.pos_x_)) + sizeof(_impl_.hp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* P_S_NOTIFY_MONSTER_INFO_MONSTER_DATA::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "neo.P_S_NOTIFY_MONSTER_INFO.MONSTER_DATA.name"));
        } else
          goto handle_unusual;
        continue;
      // float pos_x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.pos_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float pos_y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.pos_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 hp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* P_S_NOTIFY_MONSTER_INFO_MONSTER_DATA::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:neo.P_S_NOTIFY_MONSTER_INFO.MONSTER_DATA)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "neo.P_S_NOTIFY_MONSTER_INFO.MONSTER_DATA.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // float pos_x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pos_x = this->_internal_pos_x();
  uint32_t raw_pos_x;
  memcpy(&raw_pos_x, &tmp_pos_x, sizeof(tmp_pos_x));
  if (raw_pos_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_pos_x(), target);
  }

  // float pos_y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pos_y = this->_internal_pos_y();
  uint32_t raw_pos_y;
  memcpy(&raw_pos_y, &tmp_pos_y, sizeof(tmp_pos_y));
  if (raw_pos_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_pos_y(), target);
  }

  // int32 hp = 4;
  if (this->_internal_hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_hp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:neo.P_S_NOTIFY_MONSTER_INFO.MONSTER_DATA)
  return target;
}

size_t P_S_NOTIFY_MONSTER_INFO_MONSTER_DATA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:neo.P_S_NOTIFY_MONSTER_INFO.MONSTER_DATA)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // float pos_x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pos_x = this->_internal_pos_x();
  uint32_t raw_pos_x;
  memcpy(&raw_pos_x, &tmp_pos_x, sizeof(tmp_pos_x));
  if (raw_pos_x != 0) {
    total_size += 1 + 4;
  }

  // float pos_y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pos_y = this->_internal_pos_y();
  uint32_t raw_pos_y;
  memcpy(&raw_pos_y, &tmp_pos_y, sizeof(tmp_pos_y));
  if (raw_pos_y != 0) {
    total_size += 1 + 4;
  }

  // int32 hp = 4;
  if (this->_internal_hp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_hp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData P_S_NOTIFY_MONSTER_INFO_MONSTER_DATA::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    P_S_NOTIFY_MONSTER_INFO_MONSTER_DATA::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*P_S_NOTIFY_MONSTER_INFO_MONSTER_DATA::GetClassData() const { return &_class_data_; }


void P_S_NOTIFY_MONSTER_INFO_MONSTER_DATA::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<P_S_NOTIFY_MONSTER_INFO_MONSTER_DATA*>(&to_msg);
  auto& from = static_cast<const P_S_NOTIFY_MONSTER_INFO_MONSTER_DATA&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:neo.P_S_NOTIFY_MONSTER_INFO.MONSTER_DATA)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pos_x = from._internal_pos_x();
  uint32_t raw_pos_x;
  memcpy(&raw_pos_x, &tmp_pos_x, sizeof(tmp_pos_x));
  if (raw_pos_x != 0) {
    _this->_internal_set_pos_x(from._internal_pos_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pos_y = from._internal_pos_y();
  uint32_t raw_pos_y;
  memcpy(&raw_pos_y, &tmp_pos_y, sizeof(tmp_pos_y));
  if (raw_pos_y != 0) {
    _this->_internal_set_pos_y(from._internal_pos_y());
  }
  if (from._internal_hp() != 0) {
    _this->_internal_set_hp(from._internal_hp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void P_S_NOTIFY_MONSTER_INFO_MONSTER_DATA::CopyFrom(const P_S_NOTIFY_MONSTER_INFO_MONSTER_DATA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:neo.P_S_NOTIFY_MONSTER_INFO.MONSTER_DATA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P_S_NOTIFY_MONSTER_INFO_MONSTER_DATA::IsInitialized() const {
  return true;
}

void P_S_NOTIFY_MONSTER_INFO_MONSTER_DATA::InternalSwap(P_S_NOTIFY_MONSTER_INFO_MONSTER_DATA* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(P_S_NOTIFY_MONSTER_INFO_MONSTER_DATA, _impl_.hp_)
      + sizeof(P_S_NOTIFY_MONSTER_INFO_MONSTER_DATA::_impl_.hp_)
      - PROTOBUF_FIELD_OFFSET(P_S_NOTIFY_MONSTER_INFO_MONSTER_DATA, _impl_.pos_x_)>(
          reinterpret_cast<char*>(&_impl_.pos_x_),
          reinterpret_cast<char*>(&other->_impl_.pos_x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata P_S_NOTIFY_MONSTER_INFO_MONSTER_DATA::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_2eproto_getter, &descriptor_table_Packet_2eproto_once,
      file_level_metadata_Packet_2eproto[23]);
}

// ===================================================================

class P_S_NOTIFY_MONSTER_INFO::_Internal {
 public:
};

P_S_NOTIFY_MONSTER_INFO::P_S_NOTIFY_MONSTER_INFO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:neo.P_S_NOTIFY_MONSTER_INFO)
}
P_S_NOTIFY_MONSTER_INFO::P_S_NOTIFY_MONSTER_INFO(const P_S_NOTIFY_MONSTER_INFO& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  P_S_NOTIFY_MONSTER_INFO* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.monsterdatas_){from._impl_.monsterdatas_}
    , decltype(_impl_.msg_){}
    , decltype(_impl_.monstercode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    _this->_impl_.msg_.Set(from._internal_msg(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.monstercode_ = from._impl_.monstercode_;
  // @@protoc_insertion_point(copy_constructor:neo.P_S_NOTIFY_MONSTER_INFO)
}

inline void P_S_NOTIFY_MONSTER_INFO::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.monsterdatas_){arena}
    , decltype(_impl_.msg_){}
    , decltype(_impl_.monstercode_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

P_S_NOTIFY_MONSTER_INFO::~P_S_NOTIFY_MONSTER_INFO() {
  // @@protoc_insertion_point(destructor:neo.P_S_NOTIFY_MONSTER_INFO)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void P_S_NOTIFY_MONSTER_INFO::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.monsterdatas_.~RepeatedPtrField();
  _impl_.msg_.Destroy();
}

void P_S_NOTIFY_MONSTER_INFO::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void P_S_NOTIFY_MONSTER_INFO::Clear() {
// @@protoc_insertion_point(message_clear_start:neo.P_S_NOTIFY_MONSTER_INFO)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.monsterdatas_.Clear();
  _impl_.msg_.ClearToEmpty();
  _impl_.monstercode_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* P_S_NOTIFY_MONSTER_INFO::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 monsterCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.monstercode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "neo.P_S_NOTIFY_MONSTER_INFO.msg"));
        } else
          goto handle_unusual;
        continue;
      // repeated .neo.P_S_NOTIFY_MONSTER_INFO.MONSTER_DATA monsterDatas = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_monsterdatas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* P_S_NOTIFY_MONSTER_INFO::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:neo.P_S_NOTIFY_MONSTER_INFO)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 monsterCode = 1;
  if (this->_internal_monstercode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_monstercode(), target);
  }

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "neo.P_S_NOTIFY_MONSTER_INFO.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  // repeated .neo.P_S_NOTIFY_MONSTER_INFO.MONSTER_DATA monsterDatas = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_monsterdatas_size()); i < n; i++) {
    const auto& repfield = this->_internal_monsterdatas(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:neo.P_S_NOTIFY_MONSTER_INFO)
  return target;
}

size_t P_S_NOTIFY_MONSTER_INFO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:neo.P_S_NOTIFY_MONSTER_INFO)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .neo.P_S_NOTIFY_MONSTER_INFO.MONSTER_DATA monsterDatas = 3;
  total_size += 1UL * this->_internal_monsterdatas_size();
  for (const auto& msg : this->_impl_.monsterdatas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // int32 monsterCode = 1;
  if (this->_internal_monstercode() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_monstercode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData P_S_NOTIFY_MONSTER_INFO::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    P_S_NOTIFY_MONSTER_INFO::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*P_S_NOTIFY_MONSTER_INFO::GetClassData() const { return &_class_data_; }


void P_S_NOTIFY_MONSTER_INFO::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<P_S_NOTIFY_MONSTER_INFO*>(&to_msg);
  auto& from = static_cast<const P_S_NOTIFY_MONSTER_INFO&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:neo.P_S_NOTIFY_MONSTER_INFO)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.monsterdatas_.MergeFrom(from._impl_.monsterdatas_);
  if (!from._internal_msg().empty()) {
    _this->_internal_set_msg(from._internal_msg());
  }
  if (from._internal_monstercode() != 0) {
    _this->_internal_set_monstercode(from._internal_monstercode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void P_S_NOTIFY_MONSTER_INFO::CopyFrom(const P_S_NOTIFY_MONSTER_INFO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:neo.P_S_NOTIFY_MONSTER_INFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P_S_NOTIFY_MONSTER_INFO::IsInitialized() const {
  return true;
}

void P_S_NOTIFY_MONSTER_INFO::InternalSwap(P_S_NOTIFY_MONSTER_INFO* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.monsterdatas_.InternalSwap(&other->_impl_.monsterdatas_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_, lhs_arena,
      &other->_impl_.msg_, rhs_arena
  );
  swap(_impl_.monstercode_, other->_impl_.monstercode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata P_S_NOTIFY_MONSTER_INFO::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_2eproto_getter, &descriptor_table_Packet_2eproto_once,
      file_level_metadata_Packet_2eproto[24]);
}

// ===================================================================

class P_C_REQ_ATTACK_RANGE_HIT_EVENT::_Internal {
 public:
};

P_C_REQ_ATTACK_RANGE_HIT_EVENT::P_C_REQ_ATTACK_RANGE_HIT_EVENT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:neo.P_C_REQ_ATTACK_RANGE_HIT_EVENT)
}
P_C_REQ_ATTACK_RANGE_HIT_EVENT::P_C_REQ_ATTACK_RANGE_HIT_EVENT(const P_C_REQ_ATTACK_RANGE_HIT_EVENT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  P_C_REQ_ATTACK_RANGE_HIT_EVENT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.attackuser_){}
    , decltype(_impl_.hitobject_){}
    , decltype(_impl_.mapid_){}
    , decltype(_impl_.damage_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.attackuser_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attackuser_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_attackuser().empty()) {
    _this->_impl_.attackuser_.Set(from._internal_attackuser(), 
      _this->GetArenaForAllocation());
  }
  _impl_.hitobject_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hitobject_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hitobject().empty()) {
    _this->_impl_.hitobject_.Set(from._internal_hitobject(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.mapid_, &from._impl_.mapid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.damage_) -
    reinterpret_cast<char*>(&_impl_.mapid_)) + sizeof(_impl_.damage_));
  // @@protoc_insertion_point(copy_constructor:neo.P_C_REQ_ATTACK_RANGE_HIT_EVENT)
}

inline void P_C_REQ_ATTACK_RANGE_HIT_EVENT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.attackuser_){}
    , decltype(_impl_.hitobject_){}
    , decltype(_impl_.mapid_){0}
    , decltype(_impl_.damage_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.attackuser_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attackuser_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hitobject_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hitobject_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

P_C_REQ_ATTACK_RANGE_HIT_EVENT::~P_C_REQ_ATTACK_RANGE_HIT_EVENT() {
  // @@protoc_insertion_point(destructor:neo.P_C_REQ_ATTACK_RANGE_HIT_EVENT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void P_C_REQ_ATTACK_RANGE_HIT_EVENT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.attackuser_.Destroy();
  _impl_.hitobject_.Destroy();
}

void P_C_REQ_ATTACK_RANGE_HIT_EVENT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void P_C_REQ_ATTACK_RANGE_HIT_EVENT::Clear() {
// @@protoc_insertion_point(message_clear_start:neo.P_C_REQ_ATTACK_RANGE_HIT_EVENT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.attackuser_.ClearToEmpty();
  _impl_.hitobject_.ClearToEmpty();
  ::memset(&_impl_.mapid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.damage_) -
      reinterpret_cast<char*>(&_impl_.mapid_)) + sizeof(_impl_.damage_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* P_C_REQ_ATTACK_RANGE_HIT_EVENT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 mapID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.mapid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string attackUser = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_attackuser();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "neo.P_C_REQ_ATTACK_RANGE_HIT_EVENT.attackUser"));
        } else
          goto handle_unusual;
        continue;
      // string hitObject = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_hitobject();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "neo.P_C_REQ_ATTACK_RANGE_HIT_EVENT.hitObject"));
        } else
          goto handle_unusual;
        continue;
      // int32 damage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* P_C_REQ_ATTACK_RANGE_HIT_EVENT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:neo.P_C_REQ_ATTACK_RANGE_HIT_EVENT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mapID = 1;
  if (this->_internal_mapid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_mapid(), target);
  }

  // string attackUser = 2;
  if (!this->_internal_attackuser().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_attackuser().data(), static_cast<int>(this->_internal_attackuser().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "neo.P_C_REQ_ATTACK_RANGE_HIT_EVENT.attackUser");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_attackuser(), target);
  }

  // string hitObject = 3;
  if (!this->_internal_hitobject().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hitobject().data(), static_cast<int>(this->_internal_hitobject().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "neo.P_C_REQ_ATTACK_RANGE_HIT_EVENT.hitObject");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_hitobject(), target);
  }

  // int32 damage = 4;
  if (this->_internal_damage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_damage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:neo.P_C_REQ_ATTACK_RANGE_HIT_EVENT)
  return target;
}

size_t P_C_REQ_ATTACK_RANGE_HIT_EVENT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:neo.P_C_REQ_ATTACK_RANGE_HIT_EVENT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string attackUser = 2;
  if (!this->_internal_attackuser().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_attackuser());
  }

  // string hitObject = 3;
  if (!this->_internal_hitobject().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hitobject());
  }

  // int32 mapID = 1;
  if (this->_internal_mapid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mapid());
  }

  // int32 damage = 4;
  if (this->_internal_damage() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_damage());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData P_C_REQ_ATTACK_RANGE_HIT_EVENT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    P_C_REQ_ATTACK_RANGE_HIT_EVENT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*P_C_REQ_ATTACK_RANGE_HIT_EVENT::GetClassData() const { return &_class_data_; }


void P_C_REQ_ATTACK_RANGE_HIT_EVENT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<P_C_REQ_ATTACK_RANGE_HIT_EVENT*>(&to_msg);
  auto& from = static_cast<const P_C_REQ_ATTACK_RANGE_HIT_EVENT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:neo.P_C_REQ_ATTACK_RANGE_HIT_EVENT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_attackuser().empty()) {
    _this->_internal_set_attackuser(from._internal_attackuser());
  }
  if (!from._internal_hitobject().empty()) {
    _this->_internal_set_hitobject(from._internal_hitobject());
  }
  if (from._internal_mapid() != 0) {
    _this->_internal_set_mapid(from._internal_mapid());
  }
  if (from._internal_damage() != 0) {
    _this->_internal_set_damage(from._internal_damage());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void P_C_REQ_ATTACK_RANGE_HIT_EVENT::CopyFrom(const P_C_REQ_ATTACK_RANGE_HIT_EVENT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:neo.P_C_REQ_ATTACK_RANGE_HIT_EVENT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P_C_REQ_ATTACK_RANGE_HIT_EVENT::IsInitialized() const {
  return true;
}

void P_C_REQ_ATTACK_RANGE_HIT_EVENT::InternalSwap(P_C_REQ_ATTACK_RANGE_HIT_EVENT* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.attackuser_, lhs_arena,
      &other->_impl_.attackuser_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hitobject_, lhs_arena,
      &other->_impl_.hitobject_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(P_C_REQ_ATTACK_RANGE_HIT_EVENT, _impl_.damage_)
      + sizeof(P_C_REQ_ATTACK_RANGE_HIT_EVENT::_impl_.damage_)
      - PROTOBUF_FIELD_OFFSET(P_C_REQ_ATTACK_RANGE_HIT_EVENT, _impl_.mapid_)>(
          reinterpret_cast<char*>(&_impl_.mapid_),
          reinterpret_cast<char*>(&other->_impl_.mapid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata P_C_REQ_ATTACK_RANGE_HIT_EVENT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_2eproto_getter, &descriptor_table_Packet_2eproto_once,
      file_level_metadata_Packet_2eproto[25]);
}

// ===================================================================

class P_S_NOTIFY_EFFECT_EVENT::_Internal {
 public:
};

P_S_NOTIFY_EFFECT_EVENT::P_S_NOTIFY_EFFECT_EVENT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:neo.P_S_NOTIFY_EFFECT_EVENT)
}
P_S_NOTIFY_EFFECT_EVENT::P_S_NOTIFY_EFFECT_EVENT(const P_S_NOTIFY_EFFECT_EVENT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  P_S_NOTIFY_EFFECT_EVENT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.attackuser_){}
    , decltype(_impl_.startpos_x_){}
    , decltype(_impl_.startpos_y_){}
    , decltype(_impl_.startpos_z_){}
    , decltype(_impl_.dis_){}
    , decltype(_impl_.dir_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.attackuser_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attackuser_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_attackuser().empty()) {
    _this->_impl_.attackuser_.Set(from._internal_attackuser(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.startpos_x_, &from._impl_.startpos_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.dir_) -
    reinterpret_cast<char*>(&_impl_.startpos_x_)) + sizeof(_impl_.dir_));
  // @@protoc_insertion_point(copy_constructor:neo.P_S_NOTIFY_EFFECT_EVENT)
}

inline void P_S_NOTIFY_EFFECT_EVENT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.attackuser_){}
    , decltype(_impl_.startpos_x_){0}
    , decltype(_impl_.startpos_y_){0}
    , decltype(_impl_.startpos_z_){0}
    , decltype(_impl_.dis_){0}
    , decltype(_impl_.dir_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.attackuser_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attackuser_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

P_S_NOTIFY_EFFECT_EVENT::~P_S_NOTIFY_EFFECT_EVENT() {
  // @@protoc_insertion_point(destructor:neo.P_S_NOTIFY_EFFECT_EVENT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void P_S_NOTIFY_EFFECT_EVENT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.attackuser_.Destroy();
}

void P_S_NOTIFY_EFFECT_EVENT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void P_S_NOTIFY_EFFECT_EVENT::Clear() {
// @@protoc_insertion_point(message_clear_start:neo.P_S_NOTIFY_EFFECT_EVENT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.attackuser_.ClearToEmpty();
  ::memset(&_impl_.startpos_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.dir_) -
      reinterpret_cast<char*>(&_impl_.startpos_x_)) + sizeof(_impl_.dir_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* P_S_NOTIFY_EFFECT_EVENT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float startPos_x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.startpos_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float startPos_y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.startpos_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float startPos_z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.startpos_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // string attackUser = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_attackuser();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "neo.P_S_NOTIFY_EFFECT_EVENT.attackUser"));
        } else
          goto handle_unusual;
        continue;
      // float dis = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.dis_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 dir = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.dir_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* P_S_NOTIFY_EFFECT_EVENT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:neo.P_S_NOTIFY_EFFECT_EVENT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float startPos_x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_startpos_x = this->_internal_startpos_x();
  uint32_t raw_startpos_x;
  memcpy(&raw_startpos_x, &tmp_startpos_x, sizeof(tmp_startpos_x));
  if (raw_startpos_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_startpos_x(), target);
  }

  // float startPos_y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_startpos_y = this->_internal_startpos_y();
  uint32_t raw_startpos_y;
  memcpy(&raw_startpos_y, &tmp_startpos_y, sizeof(tmp_startpos_y));
  if (raw_startpos_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_startpos_y(), target);
  }

  // float startPos_z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_startpos_z = this->_internal_startpos_z();
  uint32_t raw_startpos_z;
  memcpy(&raw_startpos_z, &tmp_startpos_z, sizeof(tmp_startpos_z));
  if (raw_startpos_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_startpos_z(), target);
  }

  // string attackUser = 4;
  if (!this->_internal_attackuser().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_attackuser().data(), static_cast<int>(this->_internal_attackuser().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "neo.P_S_NOTIFY_EFFECT_EVENT.attackUser");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_attackuser(), target);
  }

  // float dis = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_dis = this->_internal_dis();
  uint32_t raw_dis;
  memcpy(&raw_dis, &tmp_dis, sizeof(tmp_dis));
  if (raw_dis != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_dis(), target);
  }

  // int32 dir = 6;
  if (this->_internal_dir() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_dir(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:neo.P_S_NOTIFY_EFFECT_EVENT)
  return target;
}

size_t P_S_NOTIFY_EFFECT_EVENT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:neo.P_S_NOTIFY_EFFECT_EVENT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string attackUser = 4;
  if (!this->_internal_attackuser().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_attackuser());
  }

  // float startPos_x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_startpos_x = this->_internal_startpos_x();
  uint32_t raw_startpos_x;
  memcpy(&raw_startpos_x, &tmp_startpos_x, sizeof(tmp_startpos_x));
  if (raw_startpos_x != 0) {
    total_size += 1 + 4;
  }

  // float startPos_y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_startpos_y = this->_internal_startpos_y();
  uint32_t raw_startpos_y;
  memcpy(&raw_startpos_y, &tmp_startpos_y, sizeof(tmp_startpos_y));
  if (raw_startpos_y != 0) {
    total_size += 1 + 4;
  }

  // float startPos_z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_startpos_z = this->_internal_startpos_z();
  uint32_t raw_startpos_z;
  memcpy(&raw_startpos_z, &tmp_startpos_z, sizeof(tmp_startpos_z));
  if (raw_startpos_z != 0) {
    total_size += 1 + 4;
  }

  // float dis = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_dis = this->_internal_dis();
  uint32_t raw_dis;
  memcpy(&raw_dis, &tmp_dis, sizeof(tmp_dis));
  if (raw_dis != 0) {
    total_size += 1 + 4;
  }

  // int32 dir = 6;
  if (this->_internal_dir() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_dir());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData P_S_NOTIFY_EFFECT_EVENT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    P_S_NOTIFY_EFFECT_EVENT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*P_S_NOTIFY_EFFECT_EVENT::GetClassData() const { return &_class_data_; }


void P_S_NOTIFY_EFFECT_EVENT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<P_S_NOTIFY_EFFECT_EVENT*>(&to_msg);
  auto& from = static_cast<const P_S_NOTIFY_EFFECT_EVENT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:neo.P_S_NOTIFY_EFFECT_EVENT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_attackuser().empty()) {
    _this->_internal_set_attackuser(from._internal_attackuser());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_startpos_x = from._internal_startpos_x();
  uint32_t raw_startpos_x;
  memcpy(&raw_startpos_x, &tmp_startpos_x, sizeof(tmp_startpos_x));
  if (raw_startpos_x != 0) {
    _this->_internal_set_startpos_x(from._internal_startpos_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_startpos_y = from._internal_startpos_y();
  uint32_t raw_startpos_y;
  memcpy(&raw_startpos_y, &tmp_startpos_y, sizeof(tmp_startpos_y));
  if (raw_startpos_y != 0) {
    _this->_internal_set_startpos_y(from._internal_startpos_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_startpos_z = from._internal_startpos_z();
  uint32_t raw_startpos_z;
  memcpy(&raw_startpos_z, &tmp_startpos_z, sizeof(tmp_startpos_z));
  if (raw_startpos_z != 0) {
    _this->_internal_set_startpos_z(from._internal_startpos_z());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_dis = from._internal_dis();
  uint32_t raw_dis;
  memcpy(&raw_dis, &tmp_dis, sizeof(tmp_dis));
  if (raw_dis != 0) {
    _this->_internal_set_dis(from._internal_dis());
  }
  if (from._internal_dir() != 0) {
    _this->_internal_set_dir(from._internal_dir());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void P_S_NOTIFY_EFFECT_EVENT::CopyFrom(const P_S_NOTIFY_EFFECT_EVENT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:neo.P_S_NOTIFY_EFFECT_EVENT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P_S_NOTIFY_EFFECT_EVENT::IsInitialized() const {
  return true;
}

void P_S_NOTIFY_EFFECT_EVENT::InternalSwap(P_S_NOTIFY_EFFECT_EVENT* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.attackuser_, lhs_arena,
      &other->_impl_.attackuser_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(P_S_NOTIFY_EFFECT_EVENT, _impl_.dir_)
      + sizeof(P_S_NOTIFY_EFFECT_EVENT::_impl_.dir_)
      - PROTOBUF_FIELD_OFFSET(P_S_NOTIFY_EFFECT_EVENT, _impl_.startpos_x_)>(
          reinterpret_cast<char*>(&_impl_.startpos_x_),
          reinterpret_cast<char*>(&other->_impl_.startpos_x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata P_S_NOTIFY_EFFECT_EVENT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_2eproto_getter, &descriptor_table_Packet_2eproto_once,
      file_level_metadata_Packet_2eproto[26]);
}

// ===================================================================

class P_C_REQ_ATTACK_RANGE_EVENT::_Internal {
 public:
};

P_C_REQ_ATTACK_RANGE_EVENT::P_C_REQ_ATTACK_RANGE_EVENT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:neo.P_C_REQ_ATTACK_RANGE_EVENT)
}
P_C_REQ_ATTACK_RANGE_EVENT::P_C_REQ_ATTACK_RANGE_EVENT(const P_C_REQ_ATTACK_RANGE_EVENT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  P_C_REQ_ATTACK_RANGE_EVENT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.attackuser_){}
    , decltype(_impl_.startpos_x_){}
    , decltype(_impl_.startpos_y_){}
    , decltype(_impl_.startpos_z_){}
    , decltype(_impl_.mapid_){}
    , decltype(_impl_.dir_){}
    , decltype(_impl_.dis_){}
    , decltype(_impl_.damage_){}
    , decltype(_impl_.animation_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.attackuser_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attackuser_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_attackuser().empty()) {
    _this->_impl_.attackuser_.Set(from._internal_attackuser(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.startpos_x_, &from._impl_.startpos_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.animation_) -
    reinterpret_cast<char*>(&_impl_.startpos_x_)) + sizeof(_impl_.animation_));
  // @@protoc_insertion_point(copy_constructor:neo.P_C_REQ_ATTACK_RANGE_EVENT)
}

inline void P_C_REQ_ATTACK_RANGE_EVENT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.attackuser_){}
    , decltype(_impl_.startpos_x_){0}
    , decltype(_impl_.startpos_y_){0}
    , decltype(_impl_.startpos_z_){0}
    , decltype(_impl_.mapid_){0}
    , decltype(_impl_.dir_){0}
    , decltype(_impl_.dis_){0}
    , decltype(_impl_.damage_){0}
    , decltype(_impl_.animation_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.attackuser_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attackuser_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

P_C_REQ_ATTACK_RANGE_EVENT::~P_C_REQ_ATTACK_RANGE_EVENT() {
  // @@protoc_insertion_point(destructor:neo.P_C_REQ_ATTACK_RANGE_EVENT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void P_C_REQ_ATTACK_RANGE_EVENT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.attackuser_.Destroy();
}

void P_C_REQ_ATTACK_RANGE_EVENT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void P_C_REQ_ATTACK_RANGE_EVENT::Clear() {
// @@protoc_insertion_point(message_clear_start:neo.P_C_REQ_ATTACK_RANGE_EVENT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.attackuser_.ClearToEmpty();
  ::memset(&_impl_.startpos_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.animation_) -
      reinterpret_cast<char*>(&_impl_.startpos_x_)) + sizeof(_impl_.animation_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* P_C_REQ_ATTACK_RANGE_EVENT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float startPos_x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.startpos_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float startPos_y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.startpos_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float startPos_z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.startpos_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 mapID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.mapid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 dir = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.dir_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string attackUser = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_attackuser();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "neo.P_C_REQ_ATTACK_RANGE_EVENT.attackUser"));
        } else
          goto handle_unusual;
        continue;
      // float dis = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.dis_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 damage = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 animation = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.animation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* P_C_REQ_ATTACK_RANGE_EVENT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:neo.P_C_REQ_ATTACK_RANGE_EVENT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float startPos_x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_startpos_x = this->_internal_startpos_x();
  uint32_t raw_startpos_x;
  memcpy(&raw_startpos_x, &tmp_startpos_x, sizeof(tmp_startpos_x));
  if (raw_startpos_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_startpos_x(), target);
  }

  // float startPos_y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_startpos_y = this->_internal_startpos_y();
  uint32_t raw_startpos_y;
  memcpy(&raw_startpos_y, &tmp_startpos_y, sizeof(tmp_startpos_y));
  if (raw_startpos_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_startpos_y(), target);
  }

  // float startPos_z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_startpos_z = this->_internal_startpos_z();
  uint32_t raw_startpos_z;
  memcpy(&raw_startpos_z, &tmp_startpos_z, sizeof(tmp_startpos_z));
  if (raw_startpos_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_startpos_z(), target);
  }

  // int32 mapID = 4;
  if (this->_internal_mapid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_mapid(), target);
  }

  // int32 dir = 5;
  if (this->_internal_dir() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_dir(), target);
  }

  // string attackUser = 6;
  if (!this->_internal_attackuser().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_attackuser().data(), static_cast<int>(this->_internal_attackuser().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "neo.P_C_REQ_ATTACK_RANGE_EVENT.attackUser");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_attackuser(), target);
  }

  // float dis = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_dis = this->_internal_dis();
  uint32_t raw_dis;
  memcpy(&raw_dis, &tmp_dis, sizeof(tmp_dis));
  if (raw_dis != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_dis(), target);
  }

  // int32 damage = 8;
  if (this->_internal_damage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_damage(), target);
  }

  // int32 animation = 9;
  if (this->_internal_animation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_animation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:neo.P_C_REQ_ATTACK_RANGE_EVENT)
  return target;
}

size_t P_C_REQ_ATTACK_RANGE_EVENT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:neo.P_C_REQ_ATTACK_RANGE_EVENT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string attackUser = 6;
  if (!this->_internal_attackuser().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_attackuser());
  }

  // float startPos_x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_startpos_x = this->_internal_startpos_x();
  uint32_t raw_startpos_x;
  memcpy(&raw_startpos_x, &tmp_startpos_x, sizeof(tmp_startpos_x));
  if (raw_startpos_x != 0) {
    total_size += 1 + 4;
  }

  // float startPos_y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_startpos_y = this->_internal_startpos_y();
  uint32_t raw_startpos_y;
  memcpy(&raw_startpos_y, &tmp_startpos_y, sizeof(tmp_startpos_y));
  if (raw_startpos_y != 0) {
    total_size += 1 + 4;
  }

  // float startPos_z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_startpos_z = this->_internal_startpos_z();
  uint32_t raw_startpos_z;
  memcpy(&raw_startpos_z, &tmp_startpos_z, sizeof(tmp_startpos_z));
  if (raw_startpos_z != 0) {
    total_size += 1 + 4;
  }

  // int32 mapID = 4;
  if (this->_internal_mapid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mapid());
  }

  // int32 dir = 5;
  if (this->_internal_dir() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_dir());
  }

  // float dis = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_dis = this->_internal_dis();
  uint32_t raw_dis;
  memcpy(&raw_dis, &tmp_dis, sizeof(tmp_dis));
  if (raw_dis != 0) {
    total_size += 1 + 4;
  }

  // int32 damage = 8;
  if (this->_internal_damage() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_damage());
  }

  // int32 animation = 9;
  if (this->_internal_animation() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_animation());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData P_C_REQ_ATTACK_RANGE_EVENT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    P_C_REQ_ATTACK_RANGE_EVENT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*P_C_REQ_ATTACK_RANGE_EVENT::GetClassData() const { return &_class_data_; }


void P_C_REQ_ATTACK_RANGE_EVENT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<P_C_REQ_ATTACK_RANGE_EVENT*>(&to_msg);
  auto& from = static_cast<const P_C_REQ_ATTACK_RANGE_EVENT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:neo.P_C_REQ_ATTACK_RANGE_EVENT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_attackuser().empty()) {
    _this->_internal_set_attackuser(from._internal_attackuser());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_startpos_x = from._internal_startpos_x();
  uint32_t raw_startpos_x;
  memcpy(&raw_startpos_x, &tmp_startpos_x, sizeof(tmp_startpos_x));
  if (raw_startpos_x != 0) {
    _this->_internal_set_startpos_x(from._internal_startpos_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_startpos_y = from._internal_startpos_y();
  uint32_t raw_startpos_y;
  memcpy(&raw_startpos_y, &tmp_startpos_y, sizeof(tmp_startpos_y));
  if (raw_startpos_y != 0) {
    _this->_internal_set_startpos_y(from._internal_startpos_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_startpos_z = from._internal_startpos_z();
  uint32_t raw_startpos_z;
  memcpy(&raw_startpos_z, &tmp_startpos_z, sizeof(tmp_startpos_z));
  if (raw_startpos_z != 0) {
    _this->_internal_set_startpos_z(from._internal_startpos_z());
  }
  if (from._internal_mapid() != 0) {
    _this->_internal_set_mapid(from._internal_mapid());
  }
  if (from._internal_dir() != 0) {
    _this->_internal_set_dir(from._internal_dir());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_dis = from._internal_dis();
  uint32_t raw_dis;
  memcpy(&raw_dis, &tmp_dis, sizeof(tmp_dis));
  if (raw_dis != 0) {
    _this->_internal_set_dis(from._internal_dis());
  }
  if (from._internal_damage() != 0) {
    _this->_internal_set_damage(from._internal_damage());
  }
  if (from._internal_animation() != 0) {
    _this->_internal_set_animation(from._internal_animation());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void P_C_REQ_ATTACK_RANGE_EVENT::CopyFrom(const P_C_REQ_ATTACK_RANGE_EVENT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:neo.P_C_REQ_ATTACK_RANGE_EVENT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P_C_REQ_ATTACK_RANGE_EVENT::IsInitialized() const {
  return true;
}

void P_C_REQ_ATTACK_RANGE_EVENT::InternalSwap(P_C_REQ_ATTACK_RANGE_EVENT* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.attackuser_, lhs_arena,
      &other->_impl_.attackuser_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(P_C_REQ_ATTACK_RANGE_EVENT, _impl_.animation_)
      + sizeof(P_C_REQ_ATTACK_RANGE_EVENT::_impl_.animation_)
      - PROTOBUF_FIELD_OFFSET(P_C_REQ_ATTACK_RANGE_EVENT, _impl_.startpos_x_)>(
          reinterpret_cast<char*>(&_impl_.startpos_x_),
          reinterpret_cast<char*>(&other->_impl_.startpos_x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata P_C_REQ_ATTACK_RANGE_EVENT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_2eproto_getter, &descriptor_table_Packet_2eproto_once,
      file_level_metadata_Packet_2eproto[27]);
}

// ===================================================================

class P_C_REQ_ATTACK_EVENT::_Internal {
 public:
};

P_C_REQ_ATTACK_EVENT::P_C_REQ_ATTACK_EVENT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:neo.P_C_REQ_ATTACK_EVENT)
}
P_C_REQ_ATTACK_EVENT::P_C_REQ_ATTACK_EVENT(const P_C_REQ_ATTACK_EVENT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  P_C_REQ_ATTACK_EVENT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.attackuser_){}
    , decltype(_impl_.hitobject_){}
    , decltype(_impl_.mapid_){}
    , decltype(_impl_.dir_){}
    , decltype(_impl_.animation_){}
    , decltype(_impl_.damage_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.attackuser_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attackuser_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_attackuser().empty()) {
    _this->_impl_.attackuser_.Set(from._internal_attackuser(), 
      _this->GetArenaForAllocation());
  }
  _impl_.hitobject_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hitobject_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hitobject().empty()) {
    _this->_impl_.hitobject_.Set(from._internal_hitobject(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.mapid_, &from._impl_.mapid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.damage_) -
    reinterpret_cast<char*>(&_impl_.mapid_)) + sizeof(_impl_.damage_));
  // @@protoc_insertion_point(copy_constructor:neo.P_C_REQ_ATTACK_EVENT)
}

inline void P_C_REQ_ATTACK_EVENT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.attackuser_){}
    , decltype(_impl_.hitobject_){}
    , decltype(_impl_.mapid_){0}
    , decltype(_impl_.dir_){0}
    , decltype(_impl_.animation_){0}
    , decltype(_impl_.damage_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.attackuser_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attackuser_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hitobject_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hitobject_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

P_C_REQ_ATTACK_EVENT::~P_C_REQ_ATTACK_EVENT() {
  // @@protoc_insertion_point(destructor:neo.P_C_REQ_ATTACK_EVENT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void P_C_REQ_ATTACK_EVENT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.attackuser_.Destroy();
  _impl_.hitobject_.Destroy();
}

void P_C_REQ_ATTACK_EVENT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void P_C_REQ_ATTACK_EVENT::Clear() {
// @@protoc_insertion_point(message_clear_start:neo.P_C_REQ_ATTACK_EVENT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.attackuser_.ClearToEmpty();
  _impl_.hitobject_.ClearToEmpty();
  ::memset(&_impl_.mapid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.damage_) -
      reinterpret_cast<char*>(&_impl_.mapid_)) + sizeof(_impl_.damage_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* P_C_REQ_ATTACK_EVENT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 mapID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.mapid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string attackUser = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_attackuser();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "neo.P_C_REQ_ATTACK_EVENT.attackUser"));
        } else
          goto handle_unusual;
        continue;
      // string hitObject = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_hitobject();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "neo.P_C_REQ_ATTACK_EVENT.hitObject"));
        } else
          goto handle_unusual;
        continue;
      // int32 dir = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.dir_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 animation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.animation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 damage = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* P_C_REQ_ATTACK_EVENT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:neo.P_C_REQ_ATTACK_EVENT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mapID = 1;
  if (this->_internal_mapid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_mapid(), target);
  }

  // string attackUser = 2;
  if (!this->_internal_attackuser().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_attackuser().data(), static_cast<int>(this->_internal_attackuser().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "neo.P_C_REQ_ATTACK_EVENT.attackUser");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_attackuser(), target);
  }

  // string hitObject = 3;
  if (!this->_internal_hitobject().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hitobject().data(), static_cast<int>(this->_internal_hitobject().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "neo.P_C_REQ_ATTACK_EVENT.hitObject");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_hitobject(), target);
  }

  // int32 dir = 4;
  if (this->_internal_dir() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_dir(), target);
  }

  // int32 animation = 5;
  if (this->_internal_animation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_animation(), target);
  }

  // int32 damage = 6;
  if (this->_internal_damage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_damage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:neo.P_C_REQ_ATTACK_EVENT)
  return target;
}

size_t P_C_REQ_ATTACK_EVENT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:neo.P_C_REQ_ATTACK_EVENT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string attackUser = 2;
  if (!this->_internal_attackuser().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_attackuser());
  }

  // string hitObject = 3;
  if (!this->_internal_hitobject().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hitobject());
  }

  // int32 mapID = 1;
  if (this->_internal_mapid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mapid());
  }

  // int32 dir = 4;
  if (this->_internal_dir() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_dir());
  }

  // int32 animation = 5;
  if (this->_internal_animation() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_animation());
  }

  // int32 damage = 6;
  if (this->_internal_damage() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_damage());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData P_C_REQ_ATTACK_EVENT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    P_C_REQ_ATTACK_EVENT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*P_C_REQ_ATTACK_EVENT::GetClassData() const { return &_class_data_; }


void P_C_REQ_ATTACK_EVENT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<P_C_REQ_ATTACK_EVENT*>(&to_msg);
  auto& from = static_cast<const P_C_REQ_ATTACK_EVENT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:neo.P_C_REQ_ATTACK_EVENT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_attackuser().empty()) {
    _this->_internal_set_attackuser(from._internal_attackuser());
  }
  if (!from._internal_hitobject().empty()) {
    _this->_internal_set_hitobject(from._internal_hitobject());
  }
  if (from._internal_mapid() != 0) {
    _this->_internal_set_mapid(from._internal_mapid());
  }
  if (from._internal_dir() != 0) {
    _this->_internal_set_dir(from._internal_dir());
  }
  if (from._internal_animation() != 0) {
    _this->_internal_set_animation(from._internal_animation());
  }
  if (from._internal_damage() != 0) {
    _this->_internal_set_damage(from._internal_damage());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void P_C_REQ_ATTACK_EVENT::CopyFrom(const P_C_REQ_ATTACK_EVENT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:neo.P_C_REQ_ATTACK_EVENT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P_C_REQ_ATTACK_EVENT::IsInitialized() const {
  return true;
}

void P_C_REQ_ATTACK_EVENT::InternalSwap(P_C_REQ_ATTACK_EVENT* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.attackuser_, lhs_arena,
      &other->_impl_.attackuser_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hitobject_, lhs_arena,
      &other->_impl_.hitobject_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(P_C_REQ_ATTACK_EVENT, _impl_.damage_)
      + sizeof(P_C_REQ_ATTACK_EVENT::_impl_.damage_)
      - PROTOBUF_FIELD_OFFSET(P_C_REQ_ATTACK_EVENT, _impl_.mapid_)>(
          reinterpret_cast<char*>(&_impl_.mapid_),
          reinterpret_cast<char*>(&other->_impl_.mapid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata P_C_REQ_ATTACK_EVENT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_2eproto_getter, &descriptor_table_Packet_2eproto_once,
      file_level_metadata_Packet_2eproto[28]);
}

// ===================================================================

class P_S_RES_ATTACK_EVENT::_Internal {
 public:
};

P_S_RES_ATTACK_EVENT::P_S_RES_ATTACK_EVENT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:neo.P_S_RES_ATTACK_EVENT)
}
P_S_RES_ATTACK_EVENT::P_S_RES_ATTACK_EVENT(const P_S_RES_ATTACK_EVENT& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  P_S_RES_ATTACK_EVENT* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:neo.P_S_RES_ATTACK_EVENT)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData P_S_RES_ATTACK_EVENT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*P_S_RES_ATTACK_EVENT::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata P_S_RES_ATTACK_EVENT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_2eproto_getter, &descriptor_table_Packet_2eproto_once,
      file_level_metadata_Packet_2eproto[29]);
}

// ===================================================================

class P_S_NOTIFY_ATTACK_EVENT::_Internal {
 public:
};

P_S_NOTIFY_ATTACK_EVENT::P_S_NOTIFY_ATTACK_EVENT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:neo.P_S_NOTIFY_ATTACK_EVENT)
}
P_S_NOTIFY_ATTACK_EVENT::P_S_NOTIFY_ATTACK_EVENT(const P_S_NOTIFY_ATTACK_EVENT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  P_S_NOTIFY_ATTACK_EVENT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hitobject_){}
    , decltype(_impl_.hp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.hitobject_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hitobject_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hitobject().empty()) {
    _this->_impl_.hitobject_.Set(from._internal_hitobject(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.hp_ = from._impl_.hp_;
  // @@protoc_insertion_point(copy_constructor:neo.P_S_NOTIFY_ATTACK_EVENT)
}

inline void P_S_NOTIFY_ATTACK_EVENT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hitobject_){}
    , decltype(_impl_.hp_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.hitobject_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hitobject_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

P_S_NOTIFY_ATTACK_EVENT::~P_S_NOTIFY_ATTACK_EVENT() {
  // @@protoc_insertion_point(destructor:neo.P_S_NOTIFY_ATTACK_EVENT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void P_S_NOTIFY_ATTACK_EVENT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hitobject_.Destroy();
}

void P_S_NOTIFY_ATTACK_EVENT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void P_S_NOTIFY_ATTACK_EVENT::Clear() {
// @@protoc_insertion_point(message_clear_start:neo.P_S_NOTIFY_ATTACK_EVENT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hitobject_.ClearToEmpty();
  _impl_.hp_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* P_S_NOTIFY_ATTACK_EVENT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string hitObject = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_hitobject();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "neo.P_S_NOTIFY_ATTACK_EVENT.hitObject"));
        } else
          goto handle_unusual;
        continue;
      // int32 HP = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* P_S_NOTIFY_ATTACK_EVENT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:neo.P_S_NOTIFY_ATTACK_EVENT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string hitObject = 1;
  if (!this->_internal_hitobject().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hitobject().data(), static_cast<int>(this->_internal_hitobject().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "neo.P_S_NOTIFY_ATTACK_EVENT.hitObject");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_hitobject(), target);
  }

  // int32 HP = 2;
  if (this->_internal_hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_hp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:neo.P_S_NOTIFY_ATTACK_EVENT)
  return target;
}

size_t P_S_NOTIFY_ATTACK_EVENT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:neo.P_S_NOTIFY_ATTACK_EVENT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string hitObject = 1;
  if (!this->_internal_hitobject().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hitobject());
  }

  // int32 HP = 2;
  if (this->_internal_hp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_hp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData P_S_NOTIFY_ATTACK_EVENT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    P_S_NOTIFY_ATTACK_EVENT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*P_S_NOTIFY_ATTACK_EVENT::GetClassData() const { return &_class_data_; }


void P_S_NOTIFY_ATTACK_EVENT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<P_S_NOTIFY_ATTACK_EVENT*>(&to_msg);
  auto& from = static_cast<const P_S_NOTIFY_ATTACK_EVENT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:neo.P_S_NOTIFY_ATTACK_EVENT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_hitobject().empty()) {
    _this->_internal_set_hitobject(from._internal_hitobject());
  }
  if (from._internal_hp() != 0) {
    _this->_internal_set_hp(from._internal_hp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void P_S_NOTIFY_ATTACK_EVENT::CopyFrom(const P_S_NOTIFY_ATTACK_EVENT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:neo.P_S_NOTIFY_ATTACK_EVENT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P_S_NOTIFY_ATTACK_EVENT::IsInitialized() const {
  return true;
}

void P_S_NOTIFY_ATTACK_EVENT::InternalSwap(P_S_NOTIFY_ATTACK_EVENT* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hitobject_, lhs_arena,
      &other->_impl_.hitobject_, rhs_arena
  );
  swap(_impl_.hp_, other->_impl_.hp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata P_S_NOTIFY_ATTACK_EVENT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_2eproto_getter, &descriptor_table_Packet_2eproto_once,
      file_level_metadata_Packet_2eproto[30]);
}

// ===================================================================

class P_C_NOTIFY_RESPAWN::_Internal {
 public:
};

P_C_NOTIFY_RESPAWN::P_C_NOTIFY_RESPAWN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:neo.P_C_NOTIFY_RESPAWN)
}
P_C_NOTIFY_RESPAWN::P_C_NOTIFY_RESPAWN(const P_C_NOTIFY_RESPAWN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  P_C_NOTIFY_RESPAWN* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:neo.P_C_NOTIFY_RESPAWN)
}

inline void P_C_NOTIFY_RESPAWN::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

P_C_NOTIFY_RESPAWN::~P_C_NOTIFY_RESPAWN() {
  // @@protoc_insertion_point(destructor:neo.P_C_NOTIFY_RESPAWN)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void P_C_NOTIFY_RESPAWN::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
}

void P_C_NOTIFY_RESPAWN::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void P_C_NOTIFY_RESPAWN::Clear() {
// @@protoc_insertion_point(message_clear_start:neo.P_C_NOTIFY_RESPAWN)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* P_C_NOTIFY_RESPAWN::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "neo.P_C_NOTIFY_RESPAWN.id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* P_C_NOTIFY_RESPAWN::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:neo.P_C_NOTIFY_RESPAWN)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "neo.P_C_NOTIFY_RESPAWN.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:neo.P_C_NOTIFY_RESPAWN)
  return target;
}

size_t P_C_NOTIFY_RESPAWN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:neo.P_C_NOTIFY_RESPAWN)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData P_C_NOTIFY_RESPAWN::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    P_C_NOTIFY_RESPAWN::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*P_C_NOTIFY_RESPAWN::GetClassData() const { return &_class_data_; }


void P_C_NOTIFY_RESPAWN::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<P_C_NOTIFY_RESPAWN*>(&to_msg);
  auto& from = static_cast<const P_C_NOTIFY_RESPAWN&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:neo.P_C_NOTIFY_RESPAWN)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void P_C_NOTIFY_RESPAWN::CopyFrom(const P_C_NOTIFY_RESPAWN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:neo.P_C_NOTIFY_RESPAWN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P_C_NOTIFY_RESPAWN::IsInitialized() const {
  return true;
}

void P_C_NOTIFY_RESPAWN::InternalSwap(P_C_NOTIFY_RESPAWN* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata P_C_NOTIFY_RESPAWN::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_2eproto_getter, &descriptor_table_Packet_2eproto_once,
      file_level_metadata_Packet_2eproto[31]);
}

// ===================================================================

class P_NOTIFY_OBJECT_UPDATE::_Internal {
 public:
};

P_NOTIFY_OBJECT_UPDATE::P_NOTIFY_OBJECT_UPDATE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:neo.P_NOTIFY_OBJECT_UPDATE)
}
P_NOTIFY_OBJECT_UPDATE::P_NOTIFY_OBJECT_UPDATE(const P_NOTIFY_OBJECT_UPDATE& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  P_NOTIFY_OBJECT_UPDATE* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:neo.P_NOTIFY_OBJECT_UPDATE)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData P_NOTIFY_OBJECT_UPDATE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*P_NOTIFY_OBJECT_UPDATE::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata P_NOTIFY_OBJECT_UPDATE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_2eproto_getter, &descriptor_table_Packet_2eproto_once,
      file_level_metadata_Packet_2eproto[32]);
}

// ===================================================================

class P_S_NOTIFY_CHANNEL_INFO_CHANNEL_DATA::_Internal {
 public:
};

P_S_NOTIFY_CHANNEL_INFO_CHANNEL_DATA::P_S_NOTIFY_CHANNEL_INFO_CHANNEL_DATA(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:neo.P_S_NOTIFY_CHANNEL_INFO.CHANNEL_DATA)
}
P_S_NOTIFY_CHANNEL_INFO_CHANNEL_DATA::P_S_NOTIFY_CHANNEL_INFO_CHANNEL_DATA(const P_S_NOTIFY_CHANNEL_INFO_CHANNEL_DATA& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  P_S_NOTIFY_CHANNEL_INFO_CHANNEL_DATA* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.usercount_){}
    , decltype(_impl_.channelid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.usercount_, &from._impl_.usercount_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.channelid_) -
    reinterpret_cast<char*>(&_impl_.usercount_)) + sizeof(_impl_.channelid_));
  // @@protoc_insertion_point(copy_constructor:neo.P_S_NOTIFY_CHANNEL_INFO.CHANNEL_DATA)
}

inline void P_S_NOTIFY_CHANNEL_INFO_CHANNEL_DATA::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.usercount_){0}
    , decltype(_impl_.channelid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

P_S_NOTIFY_CHANNEL_INFO_CHANNEL_DATA::~P_S_NOTIFY_CHANNEL_INFO_CHANNEL_DATA() {
  // @@protoc_insertion_point(destructor:neo.P_S_NOTIFY_CHANNEL_INFO.CHANNEL_DATA)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void P_S_NOTIFY_CHANNEL_INFO_CHANNEL_DATA::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void P_S_NOTIFY_CHANNEL_INFO_CHANNEL_DATA::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void P_S_NOTIFY_CHANNEL_INFO_CHANNEL_DATA::Clear() {
// @@protoc_insertion_point(message_clear_start:neo.P_S_NOTIFY_CHANNEL_INFO.CHANNEL_DATA)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.usercount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.channelid_) -
      reinterpret_cast<char*>(&_impl_.usercount_)) + sizeof(_impl_.channelid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* P_S_NOTIFY_CHANNEL_INFO_CHANNEL_DATA::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "neo.P_S_NOTIFY_CHANNEL_INFO.CHANNEL_DATA.name"));
        } else
          goto handle_unusual;
        continue;
      // int32 userCount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.usercount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 channelID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.channelid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* P_S_NOTIFY_CHANNEL_INFO_CHANNEL_DATA::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:neo.P_S_NOTIFY_CHANNEL_INFO.CHANNEL_DATA)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "neo.P_S_NOTIFY_CHANNEL_INFO.CHANNEL_DATA.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 userCount = 2;
  if (this->_internal_usercount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_usercount(), target);
  }

  // int32 channelID = 3;
  if (this->_internal_channelid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_channelid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:neo.P_S_NOTIFY_CHANNEL_INFO.CHANNEL_DATA)
  return target;
}

size_t P_S_NOTIFY_CHANNEL_INFO_CHANNEL_DATA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:neo.P_S_NOTIFY_CHANNEL_INFO.CHANNEL_DATA)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 userCount = 2;
  if (this->_internal_usercount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_usercount());
  }

  // int32 channelID = 3;
  if (this->_internal_channelid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_channelid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData P_S_NOTIFY_CHANNEL_INFO_CHANNEL_DATA::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    P_S_NOTIFY_CHANNEL_INFO_CHANNEL_DATA::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*P_S_NOTIFY_CHANNEL_INFO_CHANNEL_DATA::GetClassData() const { return &_class_data_; }


void P_S_NOTIFY_CHANNEL_INFO_CHANNEL_DATA::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<P_S_NOTIFY_CHANNEL_INFO_CHANNEL_DATA*>(&to_msg);
  auto& from = static_cast<const P_S_NOTIFY_CHANNEL_INFO_CHANNEL_DATA&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:neo.P_S_NOTIFY_CHANNEL_INFO.CHANNEL_DATA)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_usercount() != 0) {
    _this->_internal_set_usercount(from._internal_usercount());
  }
  if (from._internal_channelid() != 0) {
    _this->_internal_set_channelid(from._internal_channelid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void P_S_NOTIFY_CHANNEL_INFO_CHANNEL_DATA::CopyFrom(const P_S_NOTIFY_CHANNEL_INFO_CHANNEL_DATA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:neo.P_S_NOTIFY_CHANNEL_INFO.CHANNEL_DATA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P_S_NOTIFY_CHANNEL_INFO_CHANNEL_DATA::IsInitialized() const {
  return true;
}

void P_S_NOTIFY_CHANNEL_INFO_CHANNEL_DATA::InternalSwap(P_S_NOTIFY_CHANNEL_INFO_CHANNEL_DATA* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(P_S_NOTIFY_CHANNEL_INFO_CHANNEL_DATA, _impl_.channelid_)
      + sizeof(P_S_NOTIFY_CHANNEL_INFO_CHANNEL_DATA::_impl_.channelid_)
      - PROTOBUF_FIELD_OFFSET(P_S_NOTIFY_CHANNEL_INFO_CHANNEL_DATA, _impl_.usercount_)>(
          reinterpret_cast<char*>(&_impl_.usercount_),
          reinterpret_cast<char*>(&other->_impl_.usercount_));
}

::PROTOBUF_NAMESPACE_ID::Metadata P_S_NOTIFY_CHANNEL_INFO_CHANNEL_DATA::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_2eproto_getter, &descriptor_table_Packet_2eproto_once,
      file_level_metadata_Packet_2eproto[33]);
}

// ===================================================================

class P_S_NOTIFY_CHANNEL_INFO::_Internal {
 public:
};

P_S_NOTIFY_CHANNEL_INFO::P_S_NOTIFY_CHANNEL_INFO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:neo.P_S_NOTIFY_CHANNEL_INFO)
}
P_S_NOTIFY_CHANNEL_INFO::P_S_NOTIFY_CHANNEL_INFO(const P_S_NOTIFY_CHANNEL_INFO& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  P_S_NOTIFY_CHANNEL_INFO* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.chaanelinfos_){from._impl_.chaanelinfos_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:neo.P_S_NOTIFY_CHANNEL_INFO)
}

inline void P_S_NOTIFY_CHANNEL_INFO::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.chaanelinfos_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

P_S_NOTIFY_CHANNEL_INFO::~P_S_NOTIFY_CHANNEL_INFO() {
  // @@protoc_insertion_point(destructor:neo.P_S_NOTIFY_CHANNEL_INFO)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void P_S_NOTIFY_CHANNEL_INFO::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.chaanelinfos_.~RepeatedPtrField();
}

void P_S_NOTIFY_CHANNEL_INFO::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void P_S_NOTIFY_CHANNEL_INFO::Clear() {
// @@protoc_insertion_point(message_clear_start:neo.P_S_NOTIFY_CHANNEL_INFO)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.chaanelinfos_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* P_S_NOTIFY_CHANNEL_INFO::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .neo.P_S_NOTIFY_CHANNEL_INFO.CHANNEL_DATA chaanelInfos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_chaanelinfos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* P_S_NOTIFY_CHANNEL_INFO::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:neo.P_S_NOTIFY_CHANNEL_INFO)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .neo.P_S_NOTIFY_CHANNEL_INFO.CHANNEL_DATA chaanelInfos = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_chaanelinfos_size()); i < n; i++) {
    const auto& repfield = this->_internal_chaanelinfos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:neo.P_S_NOTIFY_CHANNEL_INFO)
  return target;
}

size_t P_S_NOTIFY_CHANNEL_INFO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:neo.P_S_NOTIFY_CHANNEL_INFO)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .neo.P_S_NOTIFY_CHANNEL_INFO.CHANNEL_DATA chaanelInfos = 1;
  total_size += 1UL * this->_internal_chaanelinfos_size();
  for (const auto& msg : this->_impl_.chaanelinfos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData P_S_NOTIFY_CHANNEL_INFO::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    P_S_NOTIFY_CHANNEL_INFO::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*P_S_NOTIFY_CHANNEL_INFO::GetClassData() const { return &_class_data_; }


void P_S_NOTIFY_CHANNEL_INFO::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<P_S_NOTIFY_CHANNEL_INFO*>(&to_msg);
  auto& from = static_cast<const P_S_NOTIFY_CHANNEL_INFO&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:neo.P_S_NOTIFY_CHANNEL_INFO)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.chaanelinfos_.MergeFrom(from._impl_.chaanelinfos_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void P_S_NOTIFY_CHANNEL_INFO::CopyFrom(const P_S_NOTIFY_CHANNEL_INFO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:neo.P_S_NOTIFY_CHANNEL_INFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P_S_NOTIFY_CHANNEL_INFO::IsInitialized() const {
  return true;
}

void P_S_NOTIFY_CHANNEL_INFO::InternalSwap(P_S_NOTIFY_CHANNEL_INFO* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.chaanelinfos_.InternalSwap(&other->_impl_.chaanelinfos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata P_S_NOTIFY_CHANNEL_INFO::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_2eproto_getter, &descriptor_table_Packet_2eproto_once,
      file_level_metadata_Packet_2eproto[34]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace neo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::neo::Header*
Arena::CreateMaybeMessage< ::neo::Header >(Arena* arena) {
  return Arena::CreateMessageInternal< ::neo::Header >(arena);
}
template<> PROTOBUF_NOINLINE ::neo::P_C_REQ_LOGIN*
Arena::CreateMaybeMessage< ::neo::P_C_REQ_LOGIN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::neo::P_C_REQ_LOGIN >(arena);
}
template<> PROTOBUF_NOINLINE ::neo::P_S_RES_LOGOUT*
Arena::CreateMaybeMessage< ::neo::P_S_RES_LOGOUT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::neo::P_S_RES_LOGOUT >(arena);
}
template<> PROTOBUF_NOINLINE ::neo::P_C_REQ_LOGOUT*
Arena::CreateMaybeMessage< ::neo::P_C_REQ_LOGOUT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::neo::P_C_REQ_LOGOUT >(arena);
}
template<> PROTOBUF_NOINLINE ::neo::P_S_RES_LOGIN*
Arena::CreateMaybeMessage< ::neo::P_S_RES_LOGIN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::neo::P_S_RES_LOGIN >(arena);
}
template<> PROTOBUF_NOINLINE ::neo::P_C_NOTIFY_PING*
Arena::CreateMaybeMessage< ::neo::P_C_NOTIFY_PING >(Arena* arena) {
  return Arena::CreateMessageInternal< ::neo::P_C_NOTIFY_PING >(arena);
}
template<> PROTOBUF_NOINLINE ::neo::P_S_NOTIFY_PING*
Arena::CreateMaybeMessage< ::neo::P_S_NOTIFY_PING >(Arena* arena) {
  return Arena::CreateMessageInternal< ::neo::P_S_NOTIFY_PING >(arena);
}
template<> PROTOBUF_NOINLINE ::neo::P_C_UPDATE_CHAR_POSITION*
Arena::CreateMaybeMessage< ::neo::P_C_UPDATE_CHAR_POSITION >(Arena* arena) {
  return Arena::CreateMessageInternal< ::neo::P_C_UPDATE_CHAR_POSITION >(arena);
}
template<> PROTOBUF_NOINLINE ::neo::GAME_OBJECT*
Arena::CreateMaybeMessage< ::neo::GAME_OBJECT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::neo::GAME_OBJECT >(arena);
}
template<> PROTOBUF_NOINLINE ::neo::P_S_NOTIFY_MONSTER_POSITION_MONSTER_POSITION*
Arena::CreateMaybeMessage< ::neo::P_S_NOTIFY_MONSTER_POSITION_MONSTER_POSITION >(Arena* arena) {
  return Arena::CreateMessageInternal< ::neo::P_S_NOTIFY_MONSTER_POSITION_MONSTER_POSITION >(arena);
}
template<> PROTOBUF_NOINLINE ::neo::P_S_NOTIFY_MONSTER_POSITION*
Arena::CreateMaybeMessage< ::neo::P_S_NOTIFY_MONSTER_POSITION >(Arena* arena) {
  return Arena::CreateMessageInternal< ::neo::P_S_NOTIFY_MONSTER_POSITION >(arena);
}
template<> PROTOBUF_NOINLINE ::neo::P_C_REQ_CHANNEL_REGISTER*
Arena::CreateMaybeMessage< ::neo::P_C_REQ_CHANNEL_REGISTER >(Arena* arena) {
  return Arena::CreateMessageInternal< ::neo::P_C_REQ_CHANNEL_REGISTER >(arena);
}
template<> PROTOBUF_NOINLINE ::neo::P_S_RES_CHANNEL_REGISTER*
Arena::CreateMaybeMessage< ::neo::P_S_RES_CHANNEL_REGISTER >(Arena* arena) {
  return Arena::CreateMessageInternal< ::neo::P_S_RES_CHANNEL_REGISTER >(arena);
}
template<> PROTOBUF_NOINLINE ::neo::P_C_NOTIFY_CHANNEL_UNREGISTER*
Arena::CreateMaybeMessage< ::neo::P_C_NOTIFY_CHANNEL_UNREGISTER >(Arena* arena) {
  return Arena::CreateMessageInternal< ::neo::P_C_NOTIFY_CHANNEL_UNREGISTER >(arena);
}
template<> PROTOBUF_NOINLINE ::neo::P_C_NOTIFY_MAP_REGISTER*
Arena::CreateMaybeMessage< ::neo::P_C_NOTIFY_MAP_REGISTER >(Arena* arena) {
  return Arena::CreateMessageInternal< ::neo::P_C_NOTIFY_MAP_REGISTER >(arena);
}
template<> PROTOBUF_NOINLINE ::neo::P_C_REQ_CHARACTER_REGISTER*
Arena::CreateMaybeMessage< ::neo::P_C_REQ_CHARACTER_REGISTER >(Arena* arena) {
  return Arena::CreateMessageInternal< ::neo::P_C_REQ_CHARACTER_REGISTER >(arena);
}
template<> PROTOBUF_NOINLINE ::neo::P_S_RES_CHARACTER_REGISTER*
Arena::CreateMaybeMessage< ::neo::P_S_RES_CHARACTER_REGISTER >(Arena* arena) {
  return Arena::CreateMessageInternal< ::neo::P_S_RES_CHARACTER_REGISTER >(arena);
}
template<> PROTOBUF_NOINLINE ::neo::P_C_REQ_CHARACTER_MAP_UNREGISTER*
Arena::CreateMaybeMessage< ::neo::P_C_REQ_CHARACTER_MAP_UNREGISTER >(Arena* arena) {
  return Arena::CreateMessageInternal< ::neo::P_C_REQ_CHARACTER_MAP_UNREGISTER >(arena);
}
template<> PROTOBUF_NOINLINE ::neo::P_S_NOTIFY_CHARACTER_MAP_UNREGISTER*
Arena::CreateMaybeMessage< ::neo::P_S_NOTIFY_CHARACTER_MAP_UNREGISTER >(Arena* arena) {
  return Arena::CreateMessageInternal< ::neo::P_S_NOTIFY_CHARACTER_MAP_UNREGISTER >(arena);
}
template<> PROTOBUF_NOINLINE ::neo::P_S_NOTIFY_MONSTER_MAP_REGISTER*
Arena::CreateMaybeMessage< ::neo::P_S_NOTIFY_MONSTER_MAP_REGISTER >(Arena* arena) {
  return Arena::CreateMessageInternal< ::neo::P_S_NOTIFY_MONSTER_MAP_REGISTER >(arena);
}
template<> PROTOBUF_NOINLINE ::neo::P_S_NOTIFY_MONSTER_MAP_UNREGISTER*
Arena::CreateMaybeMessage< ::neo::P_S_NOTIFY_MONSTER_MAP_UNREGISTER >(Arena* arena) {
  return Arena::CreateMessageInternal< ::neo::P_S_NOTIFY_MONSTER_MAP_UNREGISTER >(arena);
}
template<> PROTOBUF_NOINLINE ::neo::P_S_NOTIFY_ATTACK_ANI_EVENT*
Arena::CreateMaybeMessage< ::neo::P_S_NOTIFY_ATTACK_ANI_EVENT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::neo::P_S_NOTIFY_ATTACK_ANI_EVENT >(arena);
}
template<> PROTOBUF_NOINLINE ::neo::P_S_NOTIFY_CHARACTER_INFO*
Arena::CreateMaybeMessage< ::neo::P_S_NOTIFY_CHARACTER_INFO >(Arena* arena) {
  return Arena::CreateMessageInternal< ::neo::P_S_NOTIFY_CHARACTER_INFO >(arena);
}
template<> PROTOBUF_NOINLINE ::neo::P_S_NOTIFY_MONSTER_INFO_MONSTER_DATA*
Arena::CreateMaybeMessage< ::neo::P_S_NOTIFY_MONSTER_INFO_MONSTER_DATA >(Arena* arena) {
  return Arena::CreateMessageInternal< ::neo::P_S_NOTIFY_MONSTER_INFO_MONSTER_DATA >(arena);
}
template<> PROTOBUF_NOINLINE ::neo::P_S_NOTIFY_MONSTER_INFO*
Arena::CreateMaybeMessage< ::neo::P_S_NOTIFY_MONSTER_INFO >(Arena* arena) {
  return Arena::CreateMessageInternal< ::neo::P_S_NOTIFY_MONSTER_INFO >(arena);
}
template<> PROTOBUF_NOINLINE ::neo::P_C_REQ_ATTACK_RANGE_HIT_EVENT*
Arena::CreateMaybeMessage< ::neo::P_C_REQ_ATTACK_RANGE_HIT_EVENT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::neo::P_C_REQ_ATTACK_RANGE_HIT_EVENT >(arena);
}
template<> PROTOBUF_NOINLINE ::neo::P_S_NOTIFY_EFFECT_EVENT*
Arena::CreateMaybeMessage< ::neo::P_S_NOTIFY_EFFECT_EVENT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::neo::P_S_NOTIFY_EFFECT_EVENT >(arena);
}
template<> PROTOBUF_NOINLINE ::neo::P_C_REQ_ATTACK_RANGE_EVENT*
Arena::CreateMaybeMessage< ::neo::P_C_REQ_ATTACK_RANGE_EVENT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::neo::P_C_REQ_ATTACK_RANGE_EVENT >(arena);
}
template<> PROTOBUF_NOINLINE ::neo::P_C_REQ_ATTACK_EVENT*
Arena::CreateMaybeMessage< ::neo::P_C_REQ_ATTACK_EVENT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::neo::P_C_REQ_ATTACK_EVENT >(arena);
}
template<> PROTOBUF_NOINLINE ::neo::P_S_RES_ATTACK_EVENT*
Arena::CreateMaybeMessage< ::neo::P_S_RES_ATTACK_EVENT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::neo::P_S_RES_ATTACK_EVENT >(arena);
}
template<> PROTOBUF_NOINLINE ::neo::P_S_NOTIFY_ATTACK_EVENT*
Arena::CreateMaybeMessage< ::neo::P_S_NOTIFY_ATTACK_EVENT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::neo::P_S_NOTIFY_ATTACK_EVENT >(arena);
}
template<> PROTOBUF_NOINLINE ::neo::P_C_NOTIFY_RESPAWN*
Arena::CreateMaybeMessage< ::neo::P_C_NOTIFY_RESPAWN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::neo::P_C_NOTIFY_RESPAWN >(arena);
}
template<> PROTOBUF_NOINLINE ::neo::P_NOTIFY_OBJECT_UPDATE*
Arena::CreateMaybeMessage< ::neo::P_NOTIFY_OBJECT_UPDATE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::neo::P_NOTIFY_OBJECT_UPDATE >(arena);
}
template<> PROTOBUF_NOINLINE ::neo::P_S_NOTIFY_CHANNEL_INFO_CHANNEL_DATA*
Arena::CreateMaybeMessage< ::neo::P_S_NOTIFY_CHANNEL_INFO_CHANNEL_DATA >(Arena* arena) {
  return Arena::CreateMessageInternal< ::neo::P_S_NOTIFY_CHANNEL_INFO_CHANNEL_DATA >(arena);
}
template<> PROTOBUF_NOINLINE ::neo::P_S_NOTIFY_CHANNEL_INFO*
Arena::CreateMaybeMessage< ::neo::P_S_NOTIFY_CHANNEL_INFO >(Arena* arena) {
  return Arena::CreateMessageInternal< ::neo::P_S_NOTIFY_CHANNEL_INFO >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
